[{"path":"https://drieslab.github.io/dbSpatial/articles/class_structure.html","id":"class-structure","dir":"Articles","previous_headings":"","what":"Class Structure","title":"Class Structure","text":"dbSpatial package designed work spatial geometries DuckDB table. package builds DuckDB spatial extension. dbSpatial objects adopt S4 class system represent spatial geometries DuckDB table. dbSpatial package provides methods constructing dbSpatial objects various data sources, well various spatial operations working data. particular importance dbSpatial able work diverse data sources. package provides methods reading/writing dbSpatial objects /data.frames, S3 S4 spatial-related objects (e.g. objects sf {terra}), several spatial files supported DuckDB spatial extension.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"vignette demonstrates use dbSpatial package create DuckDB database spatial points polygons starting various data sources.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"creating-a-duckdb-connection","dir":"Articles","previous_headings":"","what":"Creating a DuckDB connection","title":"Getting Started","text":"","code":"# create db connection in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-data-frames","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From data.frames","title":"Getting Started","text":"","code":"# test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # df, tbl # specify x and y column names to cast to a point geometry a <- dbSpatial(conn = duckdb_conn,                name = \"test_points\",                value = test_data,                x_colName = \"x\",                y_colName = \"y\",                overwrite = TRUE) a #> # Class:    dbSpatial  #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from--csv-file","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From .csv file","title":"Getting Started","text":"","code":"# test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # write to file write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # load file in db a <- dbSpatial(conn = duckdb_conn,                name = \"test_points\",                value = 'test_data.csv',                x_colName = \"x\",                y_colName = \"y\",                overwrite = TRUE) a #> # Class:    dbSpatial  #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    x     y     id    geom       #>    <chr> <chr> <chr> <list>     #>  1 1     1     1     <raw [32]> #>  2 2     2     2     <raw [32]> #>  3 3     3     3     <raw [32]> #>  4 4     4     4     <raw [32]> #>  5 5     5     5     <raw [32]> #>  6 6     6     6     <raw [32]> #>  7 7     7     7     <raw [32]> #>  8 8     8     8     <raw [32]> #>  9 9     9     9     <raw [32]> #> 10 10    10    10    <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-terra-objects-spatvector","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From {terra} objects: SpatVector","title":"Getting Started","text":"","code":"# load terra package library(terra) #> terra 1.7.78  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(test_data, geom = c(\"x\", \"y\"))  # Load SpatVector in db dbSpatial(conn = duckdb_conn,           name = \"spatVector_proxy\",           value = dummy_spatvector,           overwrite = TRUE) #> # Class:    dbSpatial  #> # Source:   table<spatVector_proxy> [10 x 3] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       id geometry   geom       #>    <int> <list>     <list>     #>  1     1 <raw [21]> <raw [32]> #>  2     2 <raw [21]> <raw [32]> #>  3     3 <raw [21]> <raw [32]> #>  4     4 <raw [21]> <raw [32]> #>  5     5 <raw [21]> <raw [32]> #>  6     6 <raw [21]> <raw [32]> #>  7     7 <raw [21]> <raw [32]> #>  8     8 <raw [21]> <raw [32]> #>  9     9 <raw [21]> <raw [32]> #> 10    10 <raw [21]> <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"spatial-operations-with-terra-comparisons","dir":"Articles","previous_headings":"","what":"Spatial Operations with {terra} Comparisons","title":"Spatial Operations","text":"","code":"# load libs library(dbSpatial) library(terra) #> terra 1.7.78 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"create-test-data","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons","what":"Create test data","title":"Spatial Operations","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = 1:1e3, y = 1:1e3) attributes <- data.frame(id = 1:1e3, name = paste(\"A\", 1:1e3, sep = \"_\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # DuckDB duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)  # Preview points table db_points #> # Class:    dbSpatial  #> # Source:   table<spatVector_proxy> [?? x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       id name  geometry   geom       #>    <int> <chr> <list>     <list>     #>  1     1 A_1   <raw [21]> <raw [32]> #>  2     2 A_2   <raw [21]> <raw [32]> #>  3     3 A_3   <raw [21]> <raw [32]> #>  4     4 A_4   <raw [21]> <raw [32]> #>  5     5 A_5   <raw [21]> <raw [32]> #>  6     6 A_6   <raw [21]> <raw [32]> #>  7     7 A_7   <raw [21]> <raw [32]> #>  8     8 A_8   <raw [21]> <raw [32]> #>  9     9 A_9   <raw [21]> <raw [32]> #> 10    10 A_10  <raw [21]> <raw [32]> #> # ℹ more rows"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"extent","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Extent","title":"Spatial Operations","text":"","code":"# terra terra::ext(dummy_spatvector) #> SpatExtent : 1, 1000, 1, 1000 (xmin, xmax, ymin, ymax)  # dbSpatial dbSpatial::st_extent(dbSpatial = db_points, geom = \"geom\") #> Warning: Missing values are always removed in SQL aggregation functions. #> Use `na.rm = TRUE` to silence this warning #> This warning is displayed once every 8 hours. #> xmin xmax ymin ymax  #>    1 1000    1 1000"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"is-valid","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Is.Valid","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  head(terra::is.valid(dummy_spatvector)) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE  dbSpatial::st_isvalid(dbSpatial = db_points, geomName = \"geom\") #> # Class:    dbSpatial  #> # Source:   SQL [?? x 1] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    geom  #>    <lgl> #>  1 TRUE  #>  2 TRUE  #>  3 TRUE  #>  4 TRUE  #>  5 TRUE  #>  6 TRUE  #>  7 TRUE  #>  8 TRUE  #>  9 TRUE  #> 10 TRUE  #> # ℹ more rows"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"y-x-max","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Y, X Max","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  terra::ymax(dummy_spatvector) #> [1] 1000  terra::xmax(dummy_spatvector) #> [1] 1000  # dbSpatial dbSpatial::st_ymax(db_points) #> [1] 1000  dbSpatial::st_xmax(db_points) #> [1] 1000"},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward C. Ruiz. Author, maintainer. Jiaji George Chen. Author. Ruben Dries. Author, reviewer.","code":""},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"C. Ruiz E, George Chen J, Dries R (2024). dbSpatial: dbSpatial. R package version 0.0.0.9009, https://drieslab.github.io/dbSpatial/.","code":"@Manual{,   title = {dbSpatial: dbSpatial},   author = {Edward {C. Ruiz} and Jiaji {George Chen} and Ruben Dries},   year = {2024},   note = {R package version 0.0.0.9009},   url = {https://drieslab.github.io/dbSpatial/}, }"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"dbspatial","dir":"","previous_headings":"","what":"dbSpatial","title":"dbSpatial","text":"goal dbSpatial provide larger--memory spatial operations various spatial data sources. package largely relies DuckDB spatial extension.","code":""},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"dbSpatial","text":"can install development version dbSpatial Github like :","code":"# install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"drieslab/dbSpatial\")"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"dbSpatial","text":"DuckDB spatial extension can used wrapper functions package directly (ST_*()), dplyr verbs containing ST_*() functions, SQL queries DuckDB database connection containing ST_*() functions.","code":"library(dbSpatial)  # create duckdb db in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  points <- dbSpatial(conn = duckdb_conn,                     name = \"test_points\",                     value = test_data,                     x_colName = \"x\",                     y_colName = \"y\",                     overwrite = TRUE)  points #> # Class:    dbSpatial  #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v1.0.0 [root@Darwin 23.5.0:R 4.4.1/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/as_dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","title":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","text":"Create dbSpatial object sf terra object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/as_dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","text":"","code":"as_dbSpatial(rSpatial, conn, name, overwrite = FALSE, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/as_dbSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","text":"rSpatial sf terra object. conn DBIConnection object, returned DBI::dbConnect. name character string unquoted DBMS table name, e.g. \"table_name\" overwrite logical. Overwrite existing table. default = FALSE. ... Additional arguments passed","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/as_dbSpatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","text":"Writes rSpatial object temporary .parquet file computes VIEW database specified name geometry column geom.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/as_dbSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an sf or terra object to a dbSpatial object — as_dbSpatial","text":"","code":"coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # Set db connection duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  dbSpatial <- as_dbSpatial(rSpatial = dummy_spatvector,                          conn = duckdb_conn,                          name = \"dummy_spatvector\",                          overwrite = TRUE) dbSpatial #> # Class:    dbSpatial  #> # Source:   table<dummy_spatvector> [3 x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>      id name  geometry   geom       #>   <int> <chr> <list>     <list>     #> 1     1 A     <raw [21]> <raw [32]> #> 2     2 B     <raw [21]> <raw [32]> #> 3     3 C     <raw [21]> <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dbSpatial object with geometry data type — dbSpatial","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"Constructor function ingest diverse spatial data sources create dbSpatial object containing geometry data type based Simple Features standard. x_colName y_colName provided, POINT geometry constructed based columns.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"","code":"dbSpatial(   value,   name,   conn,   x_colName = NULL,   y_colName = NULL,   geomName = \"geom\",   overwrite = FALSE,   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"value data.frame, tbl_duckdb_connection, character (valid file path), sf object, terra object. Data construct dbSpatial object geometry data type. See details information. name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') conn DBIConnection object, returned dbConnect(). x_colName character. Name column containing numerical X coordinates. default = NULL. y_colName character. Name column containing numerical Y coordinates. default = NULL. geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". overwrite logical. Overwrite existing table. default = FALSE. ... Additional arguments passed","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"dbSpatial object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"list files supported see link . https://DuckDB.org/docs/extensions/spatial.html#st_read---read-spatial-value--files","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dbSpatial object with geometry data type — dbSpatial","text":"","code":"# create in-memory DuckDB db duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test value test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # read data.frame and create point geometry dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = test_data,           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Class:    dbSpatial  #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>  # read csv dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = 'test_data.csv',           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Class:    dbSpatial  #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    x     y     id    geom       #>    <chr> <chr> <chr> <list>     #>  1 1     1     1     <raw [32]> #>  2 2     2     2     <raw [32]> #>  3 3     3     3     <raw [32]> #>  4 4     4     4     <raw [32]> #>  5 5     5     5     <raw [32]> #>  6 6     6     6     <raw [32]> #>  7 7     7     7     <raw [32]> #>  8 8     8     8     <raw [32]> #>  9 9     9     9     <raw [32]> #> 10 10    10    10    <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate basic dbSpatial object — .sim_dbSpatial","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"Simulate basic dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"","code":".sim_dbSpatial()"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","title":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","text":"Ingest spatial data file VIEW create dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","text":"","code":".st_read(   conn,   name,   value,   x_colName = NULL,   y_colName = NULL,   geomName = \"geom\",   overwrite = FALSE,   return = TRUE,   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","text":"conn duckdb connection name name table created value data.frame file path x_colName name column containing x coordinates. default: 'NULL' y_colName name column containing y coordinates. default: 'NULL' geomName name geometry column created. default: 'geom' overwrite logical; TRUE, overwrite table already exists default: 'FALSE' return return dbSpatial object. default: 'FALSE' ... additional arguments pass st_read","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","text":"dbSpatial object return = TRUE else NULL","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ingest spatial data from a file as a VIEW and create a dbSpatial object — .st_read","text":"list files supported see documentation . https://DuckDB.org/docs/extensions/spatial.html#st_read---read-spatial-value--files","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_spatial_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Base function for spatial joins — .st_spatial_join","title":"Base function for spatial joins — .st_spatial_join","text":"Internal base function spatial joins.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_spatial_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base function for spatial joins — .st_spatial_join","text":"","code":".st_spatial_join(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name,   st_name,   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_spatial_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base function for spatial joins — .st_spatial_join","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. name output table. st_name character. name spatial join function use. ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_spatial_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base function for spatial joins — .st_spatial_join","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-st_spatial_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base function for spatial joins — .st_spatial_join","text":"Returns VIEW spatial join. Must compute save results.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/head.html","id":null,"dir":"Reference","previous_headings":"","what":"head method for dbSpatial — head","title":"head method for dbSpatial — head","text":"head method dbSpatial","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"head method for dbSpatial — head","text":"","code":"# S4 method for class 'dbSpatial' head(x, n = 6L, ...)"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/hidden_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract method for dbSpatial — dbData","title":"Extract method for dbSpatial — dbData","text":"Extract method dbSpatial Set method dbSpatial","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/hidden_aliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract method for dbSpatial — dbData","text":"","code":"# S4 method for class 'dbSpatial,missing,missing,missing' x[i, j, ..., drop = TRUE]  # S4 method for class 'dbSpatial,ANY,ANY,ANY' x[] <- value"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Install and/or load DuckDB spatial extension — loadSpatial","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"Install /load DuckDB spatial extension","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"loadSpatial(conn)"},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"conn duckdb connection","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\") loadSpatial(conn = duckdb_conn) #> DuckDB spatial extension installed and loaded"},{"path":"https://drieslab.github.io/dbSpatial/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"show method for dbSpatial — show","title":"show method for dbSpatial — show","text":"Show method dbSpatial","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show method for dbSpatial — show","text":"","code":"# S4 method for class 'dbSpatial' show(object)"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects contain each other — st_contains","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"https://postgis.net/docs/ST_Contains.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"","code":"st_contains(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"contains_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_contains(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"contains_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"contains_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"st_contains(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_contains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects contain each other — st_contains","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_contains(g1 = points,                     g1_cols_keep = c(\"name\"),                     g2 = points2,                    overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<contains_geom> [1 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      100   500     1 A2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"https://postgis.net/docs/ST_CoveredBy.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"","code":"st_coveredby(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"coveredby_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_coveredby(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"coveredBy_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"coveredBy_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"st_coveredby(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_coveredby.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects are covered by each other — st_coveredby","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_coveredby(g1 = points,                      g1_cols_keep = c(\"name\"),                      g2 = points2,                     overwrite = TRUE) #> Error in .st_spatial_relationship(g1, g1_geomName, g1_cols_keep, g2, g2_geomName,     g2_cols_keep, overwrite, name, \"st_coveredby\", ...): could not find function \".st_spatial_relationship\"  res #> Error in eval(expr, envir, enclos): object 'res' not found"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects cover each other — st_covers","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"https://postgis.net/docs/ST_Covers.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"","code":"st_covers(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"covers_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_covers(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"covers_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"covers_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"st_covers(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_covers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects cover each other — st_covers","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_covers(g1 = points,                   g1_cols_keep = c(\"name\"),                   g2 = points2,                  overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<covers_geom> [1 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      100   500     1 A2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"https://postgis.net/docs/ST_Crosses.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"","code":"st_crosses(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"crosses_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_crosses(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"crosses_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"crosses_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"st_crosses(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_crosses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects cross each other — st_crosses","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_crosses(g1 = points,                    g1_cols_keep = c(\"name\"),                    g2 = points2,                   overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<crosses_geom> [0 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #> # ℹ 6 variables: name <chr>, x <dbl>, y <dbl>, id <int>, name_1 <chr>, #> #   geom <list>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the difference between geometries in two dbSpatial objects — st_difference","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"https://postgis.net/docs/ST_Difference.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"","code":"st_difference(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"difference_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_difference(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"difference_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"difference_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"st_difference(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the difference between geometries in two dbSpatial objects — st_difference","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_difference(g1 = points,                       g1_cols_keep = c(\"name\"),                       g2 = points2,                      overwrite = TRUE)  res #> # Class:    dbSpatial  #>  #> Error in collect(x, n = n): Failed to collect lazy table. #> Caused by error: #> ! rapi_execute: Failed to run query #> Error: Conversion Error: Unimplemented type for cast (GEOMETRY -> BOOLEAN)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"https://postgis.net/docs/ST_Disjoint.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"","code":"st_disjoint(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"disjoint_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_disjoint(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"disjoint_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"disjoint_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"st_disjoint(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_disjoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects are disjoint — st_disjoint","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_disjoint(g1 = points,                     g1_cols_keep = c(\"name\"),                     g2 = points2,                    overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<disjoint_geom> [8 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      350   750     2 B2     <raw [32]> #> 2 A1      450   850     3 C2     <raw [32]> #> 3 B1      100   500     1 A2     <raw [32]> #> 4 B1      350   750     2 B2     <raw [32]> #> 5 B1      450   850     3 C2     <raw [32]> #> 6 C1      100   500     1 A2     <raw [32]> #> 7 C1      350   750     2 B2     <raw [32]> #> 8 C1      450   850     3 C2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the distance between geometries in two dbSpatial objects — st_distance","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"https://postgis.net/docs/ST_Distance.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"","code":"st_distance(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"distance_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_distance(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"distance_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"distance_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"st_distance(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the distance between geometries in two dbSpatial objects — st_distance","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_distance(g1 = points,                     g1_cols_keep = c(\"name\"),                     g2 = points2,                    overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<distance_geom> [8 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      350   750     2 B2     <raw [32]> #> 2 A1      450   850     3 C2     <raw [32]> #> 3 B1      100   500     1 A2     <raw [32]> #> 4 B1      350   750     2 B2     <raw [32]> #> 5 B1      450   850     3 C2     <raw [32]> #> 6 C1      100   500     1 A2     <raw [32]> #> 7 C1      350   750     2 B2     <raw [32]> #> 8 C1      450   850     3 C2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects are equal — st_equals","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"https://postgis.net/docs/ST_Equals.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"","code":"st_equals(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"equals_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_equals(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"equals_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"equals_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"st_equals(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_equals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects are equal — st_equals","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_equals(g1 = points,                   g1_cols_keep = c(\"name\"),                   g2 = points2,                  overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<equals_geom> [1 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      100   500     1 A2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extent of a geometry column in dbSpatial object — st_extent","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"Get extent geometry column dbSpatial  object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"","code":"st_extent(dbSpatial, geomName = \"geom\", ...)  # S4 method for class 'dbSpatial' st_extent(dbSpatial, geomName = \"geom\", ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". ... additional arguments passed methods dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"named numeric vector","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"st_extent(dbSpatial): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get extent of a geometry column in dbSpatial object — st_extent","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        # Get extent of the table st_extent(db_points) #> Warning: Missing values are always removed in SQL aggregation functions. #> Use `na.rm = TRUE` to silence this warning #> This warning is displayed once every 8 hours. #> xmin xmax ymin ymax  #>  100  300  500  700"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":null,"dir":"Reference","previous_headings":"","what":"Return geometry type — st_geometrytype","title":"Return geometry type — st_geometrytype","text":"function returns geometry type specified geometry column dbSpatial  object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return geometry type — st_geometrytype","text":"","code":"st_geometrytype(dbSpatial, geomName = \"geom\", ...)  # S4 method for class 'dbSpatial' st_geometrytype(dbSpatial, geomName = \"geom\", ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return geometry type — st_geometrytype","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". ... additional arguments passed methods dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return geometry type — st_geometrytype","text":"factor column vector database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Return geometry type — st_geometrytype","text":"st_geometrytype(dbSpatial): Method dbSpatial object","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_geometrytype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return geometry type — st_geometrytype","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        st_geometrytype(dbSpatial = db_points) #> # Class:    dbSpatial  #> # Source:   SQL [3 x 1] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   geom  #>   <fct> #> 1 POINT #> 2 POINT #> 3 POINT"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"https://postgis.net/docs/ST_Intersects.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"","code":"st_intersects(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"intersect_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_intersects(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"intersect_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"intersect_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"st_intersects(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_intersects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries between two dbSpatial objects are intersecting — st_intersects","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_intersects(g1 = points,                       g1_cols_keep = c(\"name\"),                       g2 = points2,                      overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<intersect_geom> [1 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   name      x     y    id name_1 geom       #>   <chr> <dbl> <dbl> <int> <chr>  <list>     #> 1 A1      100   500     1 A2     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometry is valid — st_isvalid","title":"Determine if geometry is valid — st_isvalid","text":"function returns whether specified geometry column specified dbSpatial  object valid .","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometry is valid — st_isvalid","text":"","code":"st_isvalid(dbSpatial, geomName = \"geom\", ...)  # S4 method for class 'dbSpatial' st_isvalid(dbSpatial, geomName = \"geom\", ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometry is valid — st_isvalid","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". ... additional arguments passed methods dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometry is valid — st_isvalid","text":"boolean column vector database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometry is valid — st_isvalid","text":"st_isvalid(dbSpatial): Method dbSpatial object","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_isvalid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometry is valid — st_isvalid","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # Create a duckdb connection duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)  # Check if geometries are valid st_isvalid(dbSpatial = db_points) #> # Class:    dbSpatial  #> # Source:   SQL [3 x 1] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>   geom  #>   <lgl> #> 1 TRUE  #> 2 TRUE  #> 3 TRUE"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometries in two dbSpatial objects touch each other — st_touches","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"https://postgis.net/docs/ST_Touches.html","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"","code":"st_touches(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"touches_geom\",   ... )  # S4 method for class 'dbSpatial,ANY,ANY,dbSpatial' st_touches(   g1,   g1_geomName = \"geom\",   g1_cols_keep = \"all\",   g2,   g2_geomName = \"geom\",   g2_cols_keep = \"all\",   overwrite = FALSE,   name = \"touches_geom\",   ... )"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"g1 dbSpatial object. g1_geomName character. geometry column name g1. Default: \"geom\". g1_cols_keep character vector. column names g1 keep. Default: \"\". g2 dbSpatial object. g2_geomName character. geometry column name g2. Default: \"geom\". g2_cols_keep character vector. column names g2 keep. Default: \"\". overwrite logical. TRUE, overwrite existing table. Default: FALSE. name character. Default: \"touches_geom\" ... Additional arguments passed duckdb::dbSendQuery.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"st_touches(   g1 = dbSpatial,   g1_geomName = ,   g1_cols_keep = ,   g2 = dbSpatial ): Method dbSpatial objects","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_touches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometries in two dbSpatial objects touch each other — st_touches","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A1\", \"B1\", \"C1\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  # preview points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A1    <raw [32]> #> 2   200   600     2 B1    <raw [32]> #> 3   300   700     3 C1    <raw [32]>  # Create a second set of points, with B1 and C1 translated by + 100 dummy_data2 <- dummy_data dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150 dummy_data2$name <- c('A2', 'B2', 'C2')  points2 <- dbSpatial(conn = con,                      name = \"points2\",                       value = dummy_data2,                       overwrite = TRUE,                       x_colName = \"x\",                       y_colName = \"y\") # preview points2 #> # Class:    dbSpatial  #> # Source:   table<points2> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A2    <raw [32]> #> 2   350   750     2 B2    <raw [32]> #> 3   450   850     3 C2    <raw [32]>  res <- st_touches(g1 = points,                    g1_cols_keep = c(\"name\"),                    g2 = points2,                   overwrite = TRUE)  res #> # Class:    dbSpatial  #> # Source:   table<touches_geom> [0 x 6] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #> # ℹ 6 variables: name <chr>, x <dbl>, y <dbl>, id <int>, name_1 <chr>, #> #   geom <list>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"function translates point geometries specified delta x delta y values.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"","code":"st_translate(dbSpatial, geomName = \"geom\", dx, dy, ...)  # S4 method for class 'dbSpatial' st_translate(dbSpatial, geomName = \"geom\", dx, dy, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". dx numeric.value shift x coordinates dy numeric. value shift y coordinates ... additional arguments passed methods dbSpatial object name string. name table add dbSpatial object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"st_translate(dbSpatial): Method dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate x, y coordinates by delta x, delta y for point geometries — st_translate","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)   points <- dbSpatial(conn = con,                     name = \"points\",                      value = dummy_data,                      overwrite = TRUE,                      x_colName = \"x\",                      y_colName = \"y\")  points #> # Class:    dbSpatial  #> # Source:   table<points> [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A     <raw [32]> #> 2   200   600     2 B     <raw [32]> #> 3   300   700     3 C     <raw [32]>  points_translated <- st_translate(dbSpatial = points, dx = 100, dy = -20)  points_translated #> # Class:    dbSpatial  #> # Source:   SQL [3 x 5] #> # Database: DuckDB v1.0.0 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>       x     y    id name  geom       #>   <dbl> <dbl> <int> <chr> <list>     #> 1   100   500     1 A     <raw [32]> #> 2   200   600     2 B     <raw [32]> #> 3   300   700     3 C     <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum x coordinate — st_xmax","title":"Get maximum x coordinate — st_xmax","text":"function returns maximum x coordinate geometry specified dbSpatial object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum x coordinate — st_xmax","text":"","code":"st_xmax(dbSpatial, geomName = \"geom\", ...)  # S4 method for class 'dbSpatial' st_xmax(dbSpatial, geomName = \"geom\", ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum x coordinate — st_xmax","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". ... additional arguments passed methods dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum x coordinate — st_xmax","text":"numerical column vector database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get maximum x coordinate — st_xmax","text":"st_xmax(dbSpatial): Method dbSpatial object","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_xmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum x coordinate — st_xmax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)  st_extent(dbSpatial = db_points) #> xmin xmax ymin ymax  #>  100  300  500  700                         st_xmax(dbSpatial = db_points) #> [1] 300"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum y coordinate — st_ymax","title":"Get maximum y coordinate — st_ymax","text":"function returns maximum y coordinate geometries specified dbSpatial  object.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum y coordinate — st_ymax","text":"","code":"st_ymax(dbSpatial, geomName = \"geom\", ...)  # S4 method for class 'dbSpatial' st_ymax(dbSpatial, geomName = \"geom\", ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum y coordinate — st_ymax","text":"geomName character string. geometry column name  dbSpatial  object. Default: \"geom\". ... additional arguments passed methods dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum y coordinate — st_ymax","text":"numerical column vector database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get maximum y coordinate — st_ymax","text":"st_ymax(dbSpatial): Method dbSpatial object","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/reference/st_ymax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum y coordinate — st_ymax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)  st_extent(dbSpatial = db_points) #> xmin xmax ymin ymax  #>  100  300  500  700                         st_ymax(dbSpatial = db_points) #> [1] 700"},{"path":"https://drieslab.github.io/dbSpatial/reference/tail.html","id":null,"dir":"Reference","previous_headings":"","what":"tail method for dbSpatial — tail","title":"tail method for dbSpatial — tail","text":"tail method dbSpatial","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tail method for dbSpatial — tail","text":"","code":"# S4 method for class 'dbSpatial' tail(x, n = 6L, ...)"},{"path":[]},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9009","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9009 (2024-08-14)","text":"Add show() method dbSpatial objects. Add new to_dbSpatial() function sf terra object interop. Use VIEW file reads. Support overwriting VIEW.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9009","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9009 (2024-08-14)","text":"Add sfarrow, glue imports. Update generics.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"docs-0-0-0-9009","dir":"Changelog","previous_headings":"","what":"Docs","title":"dbSpatial 0.0.0.9009 (2024-08-14)","text":"Add dark mode button pkgdown site. Organize pkgdown Reference section.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"docs-0-0-0-9008","dir":"Changelog","previous_headings":"","what":"Docs","title":"dbSpatial 0.0.0.9008 (2024-07-03)","text":"Update docs tessellate","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9007","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9007 (2024-07-03)","text":"Add new tessellate function (WIP) Update st_extent return named character vector Change default sql gen VIEW creation instead table","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"docs-0-0-0-9006","dir":"Changelog","previous_headings":"","what":"Docs","title":"dbSpatial 0.0.0.9006 (2024-03-28)","text":"Update function descriptions.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9005","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9005 (2024-03-27)","text":"Add spatial_relationship functions. Add new internal functions spatial_relationship functions. Use lowercase func names.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9005","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9005 (2024-03-27)","text":"Update roxygen pkgdown reference section.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9004 (2024-03-18)","text":"Update README DESCRIPTION.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update constructor function. Update ST_ functions use new constructor.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update vignettes class diagram new constructor. Add working examples ST functions.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Update class diagram. Add tictoc imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"uncategorized-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Merge branch ‘main’ https://github.com/Ed2uiz/dbSpatial.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"bug-fixes-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add missing ’ constructor. Duckdb spatial extension load error GHA workflow.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add terra imports. Add dbplyr imports. Add dplyr imports. Add duckdb imports. Add duckdbfs imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Update docs. Update pkg info. Move index.html /docs. Add license","code":""}]
