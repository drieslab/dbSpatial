[{"path":"https://drieslab.github.io/dbSpatial/articles/class_structure.html","id":"class-structure","dir":"Articles","previous_headings":"","what":"Class Structure","title":"Class Structure","text":"dbSpatial package contains convenience functions working diverse spatial data sources file formats DuckDB spatial extension. information DuckDB spatial extension see DuckDB spatial extension. information loading multiple geospatial files DuckDB, see DuckDBfs package.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"vignette demonstrates use dbSpatial package create DuckDB database spatial points polygons starting various data sources.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"creating-a-duckdb-connection","dir":"Articles","previous_headings":"","what":"Creating a DuckDB connection","title":"Getting Started","text":"","code":"# create db connection in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-data-frames","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From data.frames","title":"Getting Started","text":"","code":"library(DBI)  # test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # df, tbl # specify x and y column names to cast to a point geometry dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = test_data,           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from--csv-file","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From .csv file","title":"Getting Started","text":"","code":"# test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # write to file write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # load file in db dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = 'test_data.csv',           overwrite = TRUE) #> # Source:   table<test_points> [10 x 3] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    x     y     id    #>    <chr> <chr> <chr> #>  1 1     1     1     #>  2 2     2     2     #>  3 3     3     3     #>  4 4     4     4     #>  5 5     5     5     #>  6 6     6     6     #>  7 7     7     7     #>  8 8     8     8     #>  9 9     9     9     #> 10 10    10    10"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-terra-objects-spatvector","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From {terra} objects: SpatVector","title":"Getting Started","text":"","code":"# load terra package library(terra)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(test_data, geom = c(\"x\", \"y\"))  # Load SpatVector in db createDbSpatPoints(conn = duckdb_conn,                    name = \"spatVector_proxy\",                    value = dummy_spatvector,                    overwrite = TRUE)"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"spatial-operations-with-terra-comparisons","dir":"Articles","previous_headings":"","what":"Spatial Operations with {terra} Comparisons","title":"Spatial Operations","text":"","code":"# load libs library(dbSpatial) library(terra) #> terra 1.7.71 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"create-test-data","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons","what":"Create test data","title":"Spatial Operations","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = 1:1e3, y = 1:1e3) attributes <- data.frame(id = 1:1e3, name = paste(\"A\", 1:1e3, sep = \"_\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # DuckDB duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"extent","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Extent","title":"Spatial Operations","text":"","code":"# terra terra::ext(dummy_spatvector) #> SpatExtent : 1, 1000, 1, 1000 (xmin, xmax, ymin, ymax)  # dbSpatial dbSpatial::ST_Extent(tbl = db_points) #>   min_x max_x min_y max_y #> 1     1  1000     1  1000"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"shift","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Shift","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  shifted_spatVector = terra::shift(dummy_spatvector, dx = 10, dy = 10)  terra::geom(shifted_spatVector) #>         geom part    x    y hole #>    [1,]    1    1   11   11    0 #>    [2,]    2    1   12   12    0 #>    [3,]    3    1   13   13    0 #>    [4,]    4    1   14   14    0 #>    [5,]    5    1   15   15    0 #>    [6,]    6    1   16   16    0 #>    [7,]    7    1   17   17    0 #>    [8,]    8    1   18   18    0 #>    [9,]    9    1   19   19    0 #>   [10,]   10    1   20   20    0 #>   [11,]   11    1   21   21    0 #>   [12,]   12    1   22   22    0 #>   [13,]   13    1   23   23    0 #>   [14,]   14    1   24   24    0 #>   [15,]   15    1   25   25    0 #>   [16,]   16    1   26   26    0 #>   [17,]   17    1   27   27    0 #>   [18,]   18    1   28   28    0 #>   [19,]   19    1   29   29    0 #>   [20,]   20    1   30   30    0 #>   [21,]   21    1   31   31    0 #>   [22,]   22    1   32   32    0 #>   [23,]   23    1   33   33    0 #>   [24,]   24    1   34   34    0 #>   [25,]   25    1   35   35    0 #>   [26,]   26    1   36   36    0 #>   [27,]   27    1   37   37    0 #>   [28,]   28    1   38   38    0 #>   [29,]   29    1   39   39    0 #>   [30,]   30    1   40   40    0 #>   [31,]   31    1   41   41    0 #>   [32,]   32    1   42   42    0 #>   [33,]   33    1   43   43    0 #>   [34,]   34    1   44   44    0 #>   [35,]   35    1   45   45    0 #>   [36,]   36    1   46   46    0 #>   [37,]   37    1   47   47    0 #>   [38,]   38    1   48   48    0 #>   [39,]   39    1   49   49    0 #>   [40,]   40    1   50   50    0 #>   [41,]   41    1   51   51    0 #>   [42,]   42    1   52   52    0 #>   [43,]   43    1   53   53    0 #>   [44,]   44    1   54   54    0 #>   [45,]   45    1   55   55    0 #>   [46,]   46    1   56   56    0 #>   [47,]   47    1   57   57    0 #>   [48,]   48    1   58   58    0 #>   [49,]   49    1   59   59    0 #>   [50,]   50    1   60   60    0 #>   [51,]   51    1   61   61    0 #>   [52,]   52    1   62   62    0 #>   [53,]   53    1   63   63    0 #>   [54,]   54    1   64   64    0 #>   [55,]   55    1   65   65    0 #>   [56,]   56    1   66   66    0 #>   [57,]   57    1   67   67    0 #>   [58,]   58    1   68   68    0 #>   [59,]   59    1   69   69    0 #>   [60,]   60    1   70   70    0 #>   [61,]   61    1   71   71    0 #>   [62,]   62    1   72   72    0 #>   [63,]   63    1   73   73    0 #>   [64,]   64    1   74   74    0 #>   [65,]   65    1   75   75    0 #>   [66,]   66    1   76   76    0 #>   [67,]   67    1   77   77    0 #>   [68,]   68    1   78   78    0 #>   [69,]   69    1   79   79    0 #>   [70,]   70    1   80   80    0 #>   [71,]   71    1   81   81    0 #>   [72,]   72    1   82   82    0 #>   [73,]   73    1   83   83    0 #>   [74,]   74    1   84   84    0 #>   [75,]   75    1   85   85    0 #>   [76,]   76    1   86   86    0 #>   [77,]   77    1   87   87    0 #>   [78,]   78    1   88   88    0 #>   [79,]   79    1   89   89    0 #>   [80,]   80    1   90   90    0 #>   [81,]   81    1   91   91    0 #>   [82,]   82    1   92   92    0 #>   [83,]   83    1   93   93    0 #>   [84,]   84    1   94   94    0 #>   [85,]   85    1   95   95    0 #>   [86,]   86    1   96   96    0 #>   [87,]   87    1   97   97    0 #>   [88,]   88    1   98   98    0 #>   [89,]   89    1   99   99    0 #>   [90,]   90    1  100  100    0 #>   [91,]   91    1  101  101    0 #>   [92,]   92    1  102  102    0 #>   [93,]   93    1  103  103    0 #>   [94,]   94    1  104  104    0 #>   [95,]   95    1  105  105    0 #>   [96,]   96    1  106  106    0 #>   [97,]   97    1  107  107    0 #>   [98,]   98    1  108  108    0 #>   [99,]   99    1  109  109    0 #>  [100,]  100    1  110  110    0 #>  [101,]  101    1  111  111    0 #>  [102,]  102    1  112  112    0 #>  [103,]  103    1  113  113    0 #>  [104,]  104    1  114  114    0 #>  [105,]  105    1  115  115    0 #>  [106,]  106    1  116  116    0 #>  [107,]  107    1  117  117    0 #>  [108,]  108    1  118  118    0 #>  [109,]  109    1  119  119    0 #>  [110,]  110    1  120  120    0 #>  [111,]  111    1  121  121    0 #>  [112,]  112    1  122  122    0 #>  [113,]  113    1  123  123    0 #>  [114,]  114    1  124  124    0 #>  [115,]  115    1  125  125    0 #>  [116,]  116    1  126  126    0 #>  [117,]  117    1  127  127    0 #>  [118,]  118    1  128  128    0 #>  [119,]  119    1  129  129    0 #>  [120,]  120    1  130  130    0 #>  [121,]  121    1  131  131    0 #>  [122,]  122    1  132  132    0 #>  [123,]  123    1  133  133    0 #>  [124,]  124    1  134  134    0 #>  [125,]  125    1  135  135    0 #>  [126,]  126    1  136  136    0 #>  [127,]  127    1  137  137    0 #>  [128,]  128    1  138  138    0 #>  [129,]  129    1  139  139    0 #>  [130,]  130    1  140  140    0 #>  [131,]  131    1  141  141    0 #>  [132,]  132    1  142  142    0 #>  [133,]  133    1  143  143    0 #>  [134,]  134    1  144  144    0 #>  [135,]  135    1  145  145    0 #>  [136,]  136    1  146  146    0 #>  [137,]  137    1  147  147    0 #>  [138,]  138    1  148  148    0 #>  [139,]  139    1  149  149    0 #>  [140,]  140    1  150  150    0 #>  [141,]  141    1  151  151    0 #>  [142,]  142    1  152  152    0 #>  [143,]  143    1  153  153    0 #>  [144,]  144    1  154  154    0 #>  [145,]  145    1  155  155    0 #>  [146,]  146    1  156  156    0 #>  [147,]  147    1  157  157    0 #>  [148,]  148    1  158  158    0 #>  [149,]  149    1  159  159    0 #>  [150,]  150    1  160  160    0 #>  [151,]  151    1  161  161    0 #>  [152,]  152    1  162  162    0 #>  [153,]  153    1  163  163    0 #>  [154,]  154    1  164  164    0 #>  [155,]  155    1  165  165    0 #>  [156,]  156    1  166  166    0 #>  [157,]  157    1  167  167    0 #>  [158,]  158    1  168  168    0 #>  [159,]  159    1  169  169    0 #>  [160,]  160    1  170  170    0 #>  [161,]  161    1  171  171    0 #>  [162,]  162    1  172  172    0 #>  [163,]  163    1  173  173    0 #>  [164,]  164    1  174  174    0 #>  [165,]  165    1  175  175    0 #>  [166,]  166    1  176  176    0 #>  [167,]  167    1  177  177    0 #>  [168,]  168    1  178  178    0 #>  [169,]  169    1  179  179    0 #>  [170,]  170    1  180  180    0 #>  [171,]  171    1  181  181    0 #>  [172,]  172    1  182  182    0 #>  [173,]  173    1  183  183    0 #>  [174,]  174    1  184  184    0 #>  [175,]  175    1  185  185    0 #>  [176,]  176    1  186  186    0 #>  [177,]  177    1  187  187    0 #>  [178,]  178    1  188  188    0 #>  [179,]  179    1  189  189    0 #>  [180,]  180    1  190  190    0 #>  [181,]  181    1  191  191    0 #>  [182,]  182    1  192  192    0 #>  [183,]  183    1  193  193    0 #>  [184,]  184    1  194  194    0 #>  [185,]  185    1  195  195    0 #>  [186,]  186    1  196  196    0 #>  [187,]  187    1  197  197    0 #>  [188,]  188    1  198  198    0 #>  [189,]  189    1  199  199    0 #>  [190,]  190    1  200  200    0 #>  [191,]  191    1  201  201    0 #>  [192,]  192    1  202  202    0 #>  [193,]  193    1  203  203    0 #>  [194,]  194    1  204  204    0 #>  [195,]  195    1  205  205    0 #>  [196,]  196    1  206  206    0 #>  [197,]  197    1  207  207    0 #>  [198,]  198    1  208  208    0 #>  [199,]  199    1  209  209    0 #>  [200,]  200    1  210  210    0 #>  [201,]  201    1  211  211    0 #>  [202,]  202    1  212  212    0 #>  [203,]  203    1  213  213    0 #>  [204,]  204    1  214  214    0 #>  [205,]  205    1  215  215    0 #>  [206,]  206    1  216  216    0 #>  [207,]  207    1  217  217    0 #>  [208,]  208    1  218  218    0 #>  [209,]  209    1  219  219    0 #>  [210,]  210    1  220  220    0 #>  [211,]  211    1  221  221    0 #>  [212,]  212    1  222  222    0 #>  [213,]  213    1  223  223    0 #>  [214,]  214    1  224  224    0 #>  [215,]  215    1  225  225    0 #>  [216,]  216    1  226  226    0 #>  [217,]  217    1  227  227    0 #>  [218,]  218    1  228  228    0 #>  [219,]  219    1  229  229    0 #>  [220,]  220    1  230  230    0 #>  [221,]  221    1  231  231    0 #>  [222,]  222    1  232  232    0 #>  [223,]  223    1  233  233    0 #>  [224,]  224    1  234  234    0 #>  [225,]  225    1  235  235    0 #>  [226,]  226    1  236  236    0 #>  [227,]  227    1  237  237    0 #>  [228,]  228    1  238  238    0 #>  [229,]  229    1  239  239    0 #>  [230,]  230    1  240  240    0 #>  [231,]  231    1  241  241    0 #>  [232,]  232    1  242  242    0 #>  [233,]  233    1  243  243    0 #>  [234,]  234    1  244  244    0 #>  [235,]  235    1  245  245    0 #>  [236,]  236    1  246  246    0 #>  [237,]  237    1  247  247    0 #>  [238,]  238    1  248  248    0 #>  [239,]  239    1  249  249    0 #>  [240,]  240    1  250  250    0 #>  [241,]  241    1  251  251    0 #>  [242,]  242    1  252  252    0 #>  [243,]  243    1  253  253    0 #>  [244,]  244    1  254  254    0 #>  [245,]  245    1  255  255    0 #>  [246,]  246    1  256  256    0 #>  [247,]  247    1  257  257    0 #>  [248,]  248    1  258  258    0 #>  [249,]  249    1  259  259    0 #>  [250,]  250    1  260  260    0 #>  [251,]  251    1  261  261    0 #>  [252,]  252    1  262  262    0 #>  [253,]  253    1  263  263    0 #>  [254,]  254    1  264  264    0 #>  [255,]  255    1  265  265    0 #>  [256,]  256    1  266  266    0 #>  [257,]  257    1  267  267    0 #>  [258,]  258    1  268  268    0 #>  [259,]  259    1  269  269    0 #>  [260,]  260    1  270  270    0 #>  [261,]  261    1  271  271    0 #>  [262,]  262    1  272  272    0 #>  [263,]  263    1  273  273    0 #>  [264,]  264    1  274  274    0 #>  [265,]  265    1  275  275    0 #>  [266,]  266    1  276  276    0 #>  [267,]  267    1  277  277    0 #>  [268,]  268    1  278  278    0 #>  [269,]  269    1  279  279    0 #>  [270,]  270    1  280  280    0 #>  [271,]  271    1  281  281    0 #>  [272,]  272    1  282  282    0 #>  [273,]  273    1  283  283    0 #>  [274,]  274    1  284  284    0 #>  [275,]  275    1  285  285    0 #>  [276,]  276    1  286  286    0 #>  [277,]  277    1  287  287    0 #>  [278,]  278    1  288  288    0 #>  [279,]  279    1  289  289    0 #>  [280,]  280    1  290  290    0 #>  [281,]  281    1  291  291    0 #>  [282,]  282    1  292  292    0 #>  [283,]  283    1  293  293    0 #>  [284,]  284    1  294  294    0 #>  [285,]  285    1  295  295    0 #>  [286,]  286    1  296  296    0 #>  [287,]  287    1  297  297    0 #>  [288,]  288    1  298  298    0 #>  [289,]  289    1  299  299    0 #>  [290,]  290    1  300  300    0 #>  [291,]  291    1  301  301    0 #>  [292,]  292    1  302  302    0 #>  [293,]  293    1  303  303    0 #>  [294,]  294    1  304  304    0 #>  [295,]  295    1  305  305    0 #>  [296,]  296    1  306  306    0 #>  [297,]  297    1  307  307    0 #>  [298,]  298    1  308  308    0 #>  [299,]  299    1  309  309    0 #>  [300,]  300    1  310  310    0 #>  [301,]  301    1  311  311    0 #>  [302,]  302    1  312  312    0 #>  [303,]  303    1  313  313    0 #>  [304,]  304    1  314  314    0 #>  [305,]  305    1  315  315    0 #>  [306,]  306    1  316  316    0 #>  [307,]  307    1  317  317    0 #>  [308,]  308    1  318  318    0 #>  [309,]  309    1  319  319    0 #>  [310,]  310    1  320  320    0 #>  [311,]  311    1  321  321    0 #>  [312,]  312    1  322  322    0 #>  [313,]  313    1  323  323    0 #>  [314,]  314    1  324  324    0 #>  [315,]  315    1  325  325    0 #>  [316,]  316    1  326  326    0 #>  [317,]  317    1  327  327    0 #>  [318,]  318    1  328  328    0 #>  [319,]  319    1  329  329    0 #>  [320,]  320    1  330  330    0 #>  [321,]  321    1  331  331    0 #>  [322,]  322    1  332  332    0 #>  [323,]  323    1  333  333    0 #>  [324,]  324    1  334  334    0 #>  [325,]  325    1  335  335    0 #>  [326,]  326    1  336  336    0 #>  [327,]  327    1  337  337    0 #>  [328,]  328    1  338  338    0 #>  [329,]  329    1  339  339    0 #>  [330,]  330    1  340  340    0 #>  [331,]  331    1  341  341    0 #>  [332,]  332    1  342  342    0 #>  [333,]  333    1  343  343    0 #>  [334,]  334    1  344  344    0 #>  [335,]  335    1  345  345    0 #>  [336,]  336    1  346  346    0 #>  [337,]  337    1  347  347    0 #>  [338,]  338    1  348  348    0 #>  [339,]  339    1  349  349    0 #>  [340,]  340    1  350  350    0 #>  [341,]  341    1  351  351    0 #>  [342,]  342    1  352  352    0 #>  [343,]  343    1  353  353    0 #>  [344,]  344    1  354  354    0 #>  [345,]  345    1  355  355    0 #>  [346,]  346    1  356  356    0 #>  [347,]  347    1  357  357    0 #>  [348,]  348    1  358  358    0 #>  [349,]  349    1  359  359    0 #>  [350,]  350    1  360  360    0 #>  [351,]  351    1  361  361    0 #>  [352,]  352    1  362  362    0 #>  [353,]  353    1  363  363    0 #>  [354,]  354    1  364  364    0 #>  [355,]  355    1  365  365    0 #>  [356,]  356    1  366  366    0 #>  [357,]  357    1  367  367    0 #>  [358,]  358    1  368  368    0 #>  [359,]  359    1  369  369    0 #>  [360,]  360    1  370  370    0 #>  [361,]  361    1  371  371    0 #>  [362,]  362    1  372  372    0 #>  [363,]  363    1  373  373    0 #>  [364,]  364    1  374  374    0 #>  [365,]  365    1  375  375    0 #>  [366,]  366    1  376  376    0 #>  [367,]  367    1  377  377    0 #>  [368,]  368    1  378  378    0 #>  [369,]  369    1  379  379    0 #>  [370,]  370    1  380  380    0 #>  [371,]  371    1  381  381    0 #>  [372,]  372    1  382  382    0 #>  [373,]  373    1  383  383    0 #>  [374,]  374    1  384  384    0 #>  [375,]  375    1  385  385    0 #>  [376,]  376    1  386  386    0 #>  [377,]  377    1  387  387    0 #>  [378,]  378    1  388  388    0 #>  [379,]  379    1  389  389    0 #>  [380,]  380    1  390  390    0 #>  [381,]  381    1  391  391    0 #>  [382,]  382    1  392  392    0 #>  [383,]  383    1  393  393    0 #>  [384,]  384    1  394  394    0 #>  [385,]  385    1  395  395    0 #>  [386,]  386    1  396  396    0 #>  [387,]  387    1  397  397    0 #>  [388,]  388    1  398  398    0 #>  [389,]  389    1  399  399    0 #>  [390,]  390    1  400  400    0 #>  [391,]  391    1  401  401    0 #>  [392,]  392    1  402  402    0 #>  [393,]  393    1  403  403    0 #>  [394,]  394    1  404  404    0 #>  [395,]  395    1  405  405    0 #>  [396,]  396    1  406  406    0 #>  [397,]  397    1  407  407    0 #>  [398,]  398    1  408  408    0 #>  [399,]  399    1  409  409    0 #>  [400,]  400    1  410  410    0 #>  [401,]  401    1  411  411    0 #>  [402,]  402    1  412  412    0 #>  [403,]  403    1  413  413    0 #>  [404,]  404    1  414  414    0 #>  [405,]  405    1  415  415    0 #>  [406,]  406    1  416  416    0 #>  [407,]  407    1  417  417    0 #>  [408,]  408    1  418  418    0 #>  [409,]  409    1  419  419    0 #>  [410,]  410    1  420  420    0 #>  [411,]  411    1  421  421    0 #>  [412,]  412    1  422  422    0 #>  [413,]  413    1  423  423    0 #>  [414,]  414    1  424  424    0 #>  [415,]  415    1  425  425    0 #>  [416,]  416    1  426  426    0 #>  [417,]  417    1  427  427    0 #>  [418,]  418    1  428  428    0 #>  [419,]  419    1  429  429    0 #>  [420,]  420    1  430  430    0 #>  [421,]  421    1  431  431    0 #>  [422,]  422    1  432  432    0 #>  [423,]  423    1  433  433    0 #>  [424,]  424    1  434  434    0 #>  [425,]  425    1  435  435    0 #>  [426,]  426    1  436  436    0 #>  [427,]  427    1  437  437    0 #>  [428,]  428    1  438  438    0 #>  [429,]  429    1  439  439    0 #>  [430,]  430    1  440  440    0 #>  [431,]  431    1  441  441    0 #>  [432,]  432    1  442  442    0 #>  [433,]  433    1  443  443    0 #>  [434,]  434    1  444  444    0 #>  [435,]  435    1  445  445    0 #>  [436,]  436    1  446  446    0 #>  [437,]  437    1  447  447    0 #>  [438,]  438    1  448  448    0 #>  [439,]  439    1  449  449    0 #>  [440,]  440    1  450  450    0 #>  [441,]  441    1  451  451    0 #>  [442,]  442    1  452  452    0 #>  [443,]  443    1  453  453    0 #>  [444,]  444    1  454  454    0 #>  [445,]  445    1  455  455    0 #>  [446,]  446    1  456  456    0 #>  [447,]  447    1  457  457    0 #>  [448,]  448    1  458  458    0 #>  [449,]  449    1  459  459    0 #>  [450,]  450    1  460  460    0 #>  [451,]  451    1  461  461    0 #>  [452,]  452    1  462  462    0 #>  [453,]  453    1  463  463    0 #>  [454,]  454    1  464  464    0 #>  [455,]  455    1  465  465    0 #>  [456,]  456    1  466  466    0 #>  [457,]  457    1  467  467    0 #>  [458,]  458    1  468  468    0 #>  [459,]  459    1  469  469    0 #>  [460,]  460    1  470  470    0 #>  [461,]  461    1  471  471    0 #>  [462,]  462    1  472  472    0 #>  [463,]  463    1  473  473    0 #>  [464,]  464    1  474  474    0 #>  [465,]  465    1  475  475    0 #>  [466,]  466    1  476  476    0 #>  [467,]  467    1  477  477    0 #>  [468,]  468    1  478  478    0 #>  [469,]  469    1  479  479    0 #>  [470,]  470    1  480  480    0 #>  [471,]  471    1  481  481    0 #>  [472,]  472    1  482  482    0 #>  [473,]  473    1  483  483    0 #>  [474,]  474    1  484  484    0 #>  [475,]  475    1  485  485    0 #>  [476,]  476    1  486  486    0 #>  [477,]  477    1  487  487    0 #>  [478,]  478    1  488  488    0 #>  [479,]  479    1  489  489    0 #>  [480,]  480    1  490  490    0 #>  [481,]  481    1  491  491    0 #>  [482,]  482    1  492  492    0 #>  [483,]  483    1  493  493    0 #>  [484,]  484    1  494  494    0 #>  [485,]  485    1  495  495    0 #>  [486,]  486    1  496  496    0 #>  [487,]  487    1  497  497    0 #>  [488,]  488    1  498  498    0 #>  [489,]  489    1  499  499    0 #>  [490,]  490    1  500  500    0 #>  [491,]  491    1  501  501    0 #>  [492,]  492    1  502  502    0 #>  [493,]  493    1  503  503    0 #>  [494,]  494    1  504  504    0 #>  [495,]  495    1  505  505    0 #>  [496,]  496    1  506  506    0 #>  [497,]  497    1  507  507    0 #>  [498,]  498    1  508  508    0 #>  [499,]  499    1  509  509    0 #>  [500,]  500    1  510  510    0 #>  [501,]  501    1  511  511    0 #>  [502,]  502    1  512  512    0 #>  [503,]  503    1  513  513    0 #>  [504,]  504    1  514  514    0 #>  [505,]  505    1  515  515    0 #>  [506,]  506    1  516  516    0 #>  [507,]  507    1  517  517    0 #>  [508,]  508    1  518  518    0 #>  [509,]  509    1  519  519    0 #>  [510,]  510    1  520  520    0 #>  [511,]  511    1  521  521    0 #>  [512,]  512    1  522  522    0 #>  [513,]  513    1  523  523    0 #>  [514,]  514    1  524  524    0 #>  [515,]  515    1  525  525    0 #>  [516,]  516    1  526  526    0 #>  [517,]  517    1  527  527    0 #>  [518,]  518    1  528  528    0 #>  [519,]  519    1  529  529    0 #>  [520,]  520    1  530  530    0 #>  [521,]  521    1  531  531    0 #>  [522,]  522    1  532  532    0 #>  [523,]  523    1  533  533    0 #>  [524,]  524    1  534  534    0 #>  [525,]  525    1  535  535    0 #>  [526,]  526    1  536  536    0 #>  [527,]  527    1  537  537    0 #>  [528,]  528    1  538  538    0 #>  [529,]  529    1  539  539    0 #>  [530,]  530    1  540  540    0 #>  [531,]  531    1  541  541    0 #>  [532,]  532    1  542  542    0 #>  [533,]  533    1  543  543    0 #>  [534,]  534    1  544  544    0 #>  [535,]  535    1  545  545    0 #>  [536,]  536    1  546  546    0 #>  [537,]  537    1  547  547    0 #>  [538,]  538    1  548  548    0 #>  [539,]  539    1  549  549    0 #>  [540,]  540    1  550  550    0 #>  [541,]  541    1  551  551    0 #>  [542,]  542    1  552  552    0 #>  [543,]  543    1  553  553    0 #>  [544,]  544    1  554  554    0 #>  [545,]  545    1  555  555    0 #>  [546,]  546    1  556  556    0 #>  [547,]  547    1  557  557    0 #>  [548,]  548    1  558  558    0 #>  [549,]  549    1  559  559    0 #>  [550,]  550    1  560  560    0 #>  [551,]  551    1  561  561    0 #>  [552,]  552    1  562  562    0 #>  [553,]  553    1  563  563    0 #>  [554,]  554    1  564  564    0 #>  [555,]  555    1  565  565    0 #>  [556,]  556    1  566  566    0 #>  [557,]  557    1  567  567    0 #>  [558,]  558    1  568  568    0 #>  [559,]  559    1  569  569    0 #>  [560,]  560    1  570  570    0 #>  [561,]  561    1  571  571    0 #>  [562,]  562    1  572  572    0 #>  [563,]  563    1  573  573    0 #>  [564,]  564    1  574  574    0 #>  [565,]  565    1  575  575    0 #>  [566,]  566    1  576  576    0 #>  [567,]  567    1  577  577    0 #>  [568,]  568    1  578  578    0 #>  [569,]  569    1  579  579    0 #>  [570,]  570    1  580  580    0 #>  [571,]  571    1  581  581    0 #>  [572,]  572    1  582  582    0 #>  [573,]  573    1  583  583    0 #>  [574,]  574    1  584  584    0 #>  [575,]  575    1  585  585    0 #>  [576,]  576    1  586  586    0 #>  [577,]  577    1  587  587    0 #>  [578,]  578    1  588  588    0 #>  [579,]  579    1  589  589    0 #>  [580,]  580    1  590  590    0 #>  [581,]  581    1  591  591    0 #>  [582,]  582    1  592  592    0 #>  [583,]  583    1  593  593    0 #>  [584,]  584    1  594  594    0 #>  [585,]  585    1  595  595    0 #>  [586,]  586    1  596  596    0 #>  [587,]  587    1  597  597    0 #>  [588,]  588    1  598  598    0 #>  [589,]  589    1  599  599    0 #>  [590,]  590    1  600  600    0 #>  [591,]  591    1  601  601    0 #>  [592,]  592    1  602  602    0 #>  [593,]  593    1  603  603    0 #>  [594,]  594    1  604  604    0 #>  [595,]  595    1  605  605    0 #>  [596,]  596    1  606  606    0 #>  [597,]  597    1  607  607    0 #>  [598,]  598    1  608  608    0 #>  [599,]  599    1  609  609    0 #>  [600,]  600    1  610  610    0 #>  [601,]  601    1  611  611    0 #>  [602,]  602    1  612  612    0 #>  [603,]  603    1  613  613    0 #>  [604,]  604    1  614  614    0 #>  [605,]  605    1  615  615    0 #>  [606,]  606    1  616  616    0 #>  [607,]  607    1  617  617    0 #>  [608,]  608    1  618  618    0 #>  [609,]  609    1  619  619    0 #>  [610,]  610    1  620  620    0 #>  [611,]  611    1  621  621    0 #>  [612,]  612    1  622  622    0 #>  [613,]  613    1  623  623    0 #>  [614,]  614    1  624  624    0 #>  [615,]  615    1  625  625    0 #>  [616,]  616    1  626  626    0 #>  [617,]  617    1  627  627    0 #>  [618,]  618    1  628  628    0 #>  [619,]  619    1  629  629    0 #>  [620,]  620    1  630  630    0 #>  [621,]  621    1  631  631    0 #>  [622,]  622    1  632  632    0 #>  [623,]  623    1  633  633    0 #>  [624,]  624    1  634  634    0 #>  [625,]  625    1  635  635    0 #>  [626,]  626    1  636  636    0 #>  [627,]  627    1  637  637    0 #>  [628,]  628    1  638  638    0 #>  [629,]  629    1  639  639    0 #>  [630,]  630    1  640  640    0 #>  [631,]  631    1  641  641    0 #>  [632,]  632    1  642  642    0 #>  [633,]  633    1  643  643    0 #>  [634,]  634    1  644  644    0 #>  [635,]  635    1  645  645    0 #>  [636,]  636    1  646  646    0 #>  [637,]  637    1  647  647    0 #>  [638,]  638    1  648  648    0 #>  [639,]  639    1  649  649    0 #>  [640,]  640    1  650  650    0 #>  [641,]  641    1  651  651    0 #>  [642,]  642    1  652  652    0 #>  [643,]  643    1  653  653    0 #>  [644,]  644    1  654  654    0 #>  [645,]  645    1  655  655    0 #>  [646,]  646    1  656  656    0 #>  [647,]  647    1  657  657    0 #>  [648,]  648    1  658  658    0 #>  [649,]  649    1  659  659    0 #>  [650,]  650    1  660  660    0 #>  [651,]  651    1  661  661    0 #>  [652,]  652    1  662  662    0 #>  [653,]  653    1  663  663    0 #>  [654,]  654    1  664  664    0 #>  [655,]  655    1  665  665    0 #>  [656,]  656    1  666  666    0 #>  [657,]  657    1  667  667    0 #>  [658,]  658    1  668  668    0 #>  [659,]  659    1  669  669    0 #>  [660,]  660    1  670  670    0 #>  [661,]  661    1  671  671    0 #>  [662,]  662    1  672  672    0 #>  [663,]  663    1  673  673    0 #>  [664,]  664    1  674  674    0 #>  [665,]  665    1  675  675    0 #>  [666,]  666    1  676  676    0 #>  [667,]  667    1  677  677    0 #>  [668,]  668    1  678  678    0 #>  [669,]  669    1  679  679    0 #>  [670,]  670    1  680  680    0 #>  [671,]  671    1  681  681    0 #>  [672,]  672    1  682  682    0 #>  [673,]  673    1  683  683    0 #>  [674,]  674    1  684  684    0 #>  [675,]  675    1  685  685    0 #>  [676,]  676    1  686  686    0 #>  [677,]  677    1  687  687    0 #>  [678,]  678    1  688  688    0 #>  [679,]  679    1  689  689    0 #>  [680,]  680    1  690  690    0 #>  [681,]  681    1  691  691    0 #>  [682,]  682    1  692  692    0 #>  [683,]  683    1  693  693    0 #>  [684,]  684    1  694  694    0 #>  [685,]  685    1  695  695    0 #>  [686,]  686    1  696  696    0 #>  [687,]  687    1  697  697    0 #>  [688,]  688    1  698  698    0 #>  [689,]  689    1  699  699    0 #>  [690,]  690    1  700  700    0 #>  [691,]  691    1  701  701    0 #>  [692,]  692    1  702  702    0 #>  [693,]  693    1  703  703    0 #>  [694,]  694    1  704  704    0 #>  [695,]  695    1  705  705    0 #>  [696,]  696    1  706  706    0 #>  [697,]  697    1  707  707    0 #>  [698,]  698    1  708  708    0 #>  [699,]  699    1  709  709    0 #>  [700,]  700    1  710  710    0 #>  [701,]  701    1  711  711    0 #>  [702,]  702    1  712  712    0 #>  [703,]  703    1  713  713    0 #>  [704,]  704    1  714  714    0 #>  [705,]  705    1  715  715    0 #>  [706,]  706    1  716  716    0 #>  [707,]  707    1  717  717    0 #>  [708,]  708    1  718  718    0 #>  [709,]  709    1  719  719    0 #>  [710,]  710    1  720  720    0 #>  [711,]  711    1  721  721    0 #>  [712,]  712    1  722  722    0 #>  [713,]  713    1  723  723    0 #>  [714,]  714    1  724  724    0 #>  [715,]  715    1  725  725    0 #>  [716,]  716    1  726  726    0 #>  [717,]  717    1  727  727    0 #>  [718,]  718    1  728  728    0 #>  [719,]  719    1  729  729    0 #>  [720,]  720    1  730  730    0 #>  [721,]  721    1  731  731    0 #>  [722,]  722    1  732  732    0 #>  [723,]  723    1  733  733    0 #>  [724,]  724    1  734  734    0 #>  [725,]  725    1  735  735    0 #>  [726,]  726    1  736  736    0 #>  [727,]  727    1  737  737    0 #>  [728,]  728    1  738  738    0 #>  [729,]  729    1  739  739    0 #>  [730,]  730    1  740  740    0 #>  [731,]  731    1  741  741    0 #>  [732,]  732    1  742  742    0 #>  [733,]  733    1  743  743    0 #>  [734,]  734    1  744  744    0 #>  [735,]  735    1  745  745    0 #>  [736,]  736    1  746  746    0 #>  [737,]  737    1  747  747    0 #>  [738,]  738    1  748  748    0 #>  [739,]  739    1  749  749    0 #>  [740,]  740    1  750  750    0 #>  [741,]  741    1  751  751    0 #>  [742,]  742    1  752  752    0 #>  [743,]  743    1  753  753    0 #>  [744,]  744    1  754  754    0 #>  [745,]  745    1  755  755    0 #>  [746,]  746    1  756  756    0 #>  [747,]  747    1  757  757    0 #>  [748,]  748    1  758  758    0 #>  [749,]  749    1  759  759    0 #>  [750,]  750    1  760  760    0 #>  [751,]  751    1  761  761    0 #>  [752,]  752    1  762  762    0 #>  [753,]  753    1  763  763    0 #>  [754,]  754    1  764  764    0 #>  [755,]  755    1  765  765    0 #>  [756,]  756    1  766  766    0 #>  [757,]  757    1  767  767    0 #>  [758,]  758    1  768  768    0 #>  [759,]  759    1  769  769    0 #>  [760,]  760    1  770  770    0 #>  [761,]  761    1  771  771    0 #>  [762,]  762    1  772  772    0 #>  [763,]  763    1  773  773    0 #>  [764,]  764    1  774  774    0 #>  [765,]  765    1  775  775    0 #>  [766,]  766    1  776  776    0 #>  [767,]  767    1  777  777    0 #>  [768,]  768    1  778  778    0 #>  [769,]  769    1  779  779    0 #>  [770,]  770    1  780  780    0 #>  [771,]  771    1  781  781    0 #>  [772,]  772    1  782  782    0 #>  [773,]  773    1  783  783    0 #>  [774,]  774    1  784  784    0 #>  [775,]  775    1  785  785    0 #>  [776,]  776    1  786  786    0 #>  [777,]  777    1  787  787    0 #>  [778,]  778    1  788  788    0 #>  [779,]  779    1  789  789    0 #>  [780,]  780    1  790  790    0 #>  [781,]  781    1  791  791    0 #>  [782,]  782    1  792  792    0 #>  [783,]  783    1  793  793    0 #>  [784,]  784    1  794  794    0 #>  [785,]  785    1  795  795    0 #>  [786,]  786    1  796  796    0 #>  [787,]  787    1  797  797    0 #>  [788,]  788    1  798  798    0 #>  [789,]  789    1  799  799    0 #>  [790,]  790    1  800  800    0 #>  [791,]  791    1  801  801    0 #>  [792,]  792    1  802  802    0 #>  [793,]  793    1  803  803    0 #>  [794,]  794    1  804  804    0 #>  [795,]  795    1  805  805    0 #>  [796,]  796    1  806  806    0 #>  [797,]  797    1  807  807    0 #>  [798,]  798    1  808  808    0 #>  [799,]  799    1  809  809    0 #>  [800,]  800    1  810  810    0 #>  [801,]  801    1  811  811    0 #>  [802,]  802    1  812  812    0 #>  [803,]  803    1  813  813    0 #>  [804,]  804    1  814  814    0 #>  [805,]  805    1  815  815    0 #>  [806,]  806    1  816  816    0 #>  [807,]  807    1  817  817    0 #>  [808,]  808    1  818  818    0 #>  [809,]  809    1  819  819    0 #>  [810,]  810    1  820  820    0 #>  [811,]  811    1  821  821    0 #>  [812,]  812    1  822  822    0 #>  [813,]  813    1  823  823    0 #>  [814,]  814    1  824  824    0 #>  [815,]  815    1  825  825    0 #>  [816,]  816    1  826  826    0 #>  [817,]  817    1  827  827    0 #>  [818,]  818    1  828  828    0 #>  [819,]  819    1  829  829    0 #>  [820,]  820    1  830  830    0 #>  [821,]  821    1  831  831    0 #>  [822,]  822    1  832  832    0 #>  [823,]  823    1  833  833    0 #>  [824,]  824    1  834  834    0 #>  [825,]  825    1  835  835    0 #>  [826,]  826    1  836  836    0 #>  [827,]  827    1  837  837    0 #>  [828,]  828    1  838  838    0 #>  [829,]  829    1  839  839    0 #>  [830,]  830    1  840  840    0 #>  [831,]  831    1  841  841    0 #>  [832,]  832    1  842  842    0 #>  [833,]  833    1  843  843    0 #>  [834,]  834    1  844  844    0 #>  [835,]  835    1  845  845    0 #>  [836,]  836    1  846  846    0 #>  [837,]  837    1  847  847    0 #>  [838,]  838    1  848  848    0 #>  [839,]  839    1  849  849    0 #>  [840,]  840    1  850  850    0 #>  [841,]  841    1  851  851    0 #>  [842,]  842    1  852  852    0 #>  [843,]  843    1  853  853    0 #>  [844,]  844    1  854  854    0 #>  [845,]  845    1  855  855    0 #>  [846,]  846    1  856  856    0 #>  [847,]  847    1  857  857    0 #>  [848,]  848    1  858  858    0 #>  [849,]  849    1  859  859    0 #>  [850,]  850    1  860  860    0 #>  [851,]  851    1  861  861    0 #>  [852,]  852    1  862  862    0 #>  [853,]  853    1  863  863    0 #>  [854,]  854    1  864  864    0 #>  [855,]  855    1  865  865    0 #>  [856,]  856    1  866  866    0 #>  [857,]  857    1  867  867    0 #>  [858,]  858    1  868  868    0 #>  [859,]  859    1  869  869    0 #>  [860,]  860    1  870  870    0 #>  [861,]  861    1  871  871    0 #>  [862,]  862    1  872  872    0 #>  [863,]  863    1  873  873    0 #>  [864,]  864    1  874  874    0 #>  [865,]  865    1  875  875    0 #>  [866,]  866    1  876  876    0 #>  [867,]  867    1  877  877    0 #>  [868,]  868    1  878  878    0 #>  [869,]  869    1  879  879    0 #>  [870,]  870    1  880  880    0 #>  [871,]  871    1  881  881    0 #>  [872,]  872    1  882  882    0 #>  [873,]  873    1  883  883    0 #>  [874,]  874    1  884  884    0 #>  [875,]  875    1  885  885    0 #>  [876,]  876    1  886  886    0 #>  [877,]  877    1  887  887    0 #>  [878,]  878    1  888  888    0 #>  [879,]  879    1  889  889    0 #>  [880,]  880    1  890  890    0 #>  [881,]  881    1  891  891    0 #>  [882,]  882    1  892  892    0 #>  [883,]  883    1  893  893    0 #>  [884,]  884    1  894  894    0 #>  [885,]  885    1  895  895    0 #>  [886,]  886    1  896  896    0 #>  [887,]  887    1  897  897    0 #>  [888,]  888    1  898  898    0 #>  [889,]  889    1  899  899    0 #>  [890,]  890    1  900  900    0 #>  [891,]  891    1  901  901    0 #>  [892,]  892    1  902  902    0 #>  [893,]  893    1  903  903    0 #>  [894,]  894    1  904  904    0 #>  [895,]  895    1  905  905    0 #>  [896,]  896    1  906  906    0 #>  [897,]  897    1  907  907    0 #>  [898,]  898    1  908  908    0 #>  [899,]  899    1  909  909    0 #>  [900,]  900    1  910  910    0 #>  [901,]  901    1  911  911    0 #>  [902,]  902    1  912  912    0 #>  [903,]  903    1  913  913    0 #>  [904,]  904    1  914  914    0 #>  [905,]  905    1  915  915    0 #>  [906,]  906    1  916  916    0 #>  [907,]  907    1  917  917    0 #>  [908,]  908    1  918  918    0 #>  [909,]  909    1  919  919    0 #>  [910,]  910    1  920  920    0 #>  [911,]  911    1  921  921    0 #>  [912,]  912    1  922  922    0 #>  [913,]  913    1  923  923    0 #>  [914,]  914    1  924  924    0 #>  [915,]  915    1  925  925    0 #>  [916,]  916    1  926  926    0 #>  [917,]  917    1  927  927    0 #>  [918,]  918    1  928  928    0 #>  [919,]  919    1  929  929    0 #>  [920,]  920    1  930  930    0 #>  [921,]  921    1  931  931    0 #>  [922,]  922    1  932  932    0 #>  [923,]  923    1  933  933    0 #>  [924,]  924    1  934  934    0 #>  [925,]  925    1  935  935    0 #>  [926,]  926    1  936  936    0 #>  [927,]  927    1  937  937    0 #>  [928,]  928    1  938  938    0 #>  [929,]  929    1  939  939    0 #>  [930,]  930    1  940  940    0 #>  [931,]  931    1  941  941    0 #>  [932,]  932    1  942  942    0 #>  [933,]  933    1  943  943    0 #>  [934,]  934    1  944  944    0 #>  [935,]  935    1  945  945    0 #>  [936,]  936    1  946  946    0 #>  [937,]  937    1  947  947    0 #>  [938,]  938    1  948  948    0 #>  [939,]  939    1  949  949    0 #>  [940,]  940    1  950  950    0 #>  [941,]  941    1  951  951    0 #>  [942,]  942    1  952  952    0 #>  [943,]  943    1  953  953    0 #>  [944,]  944    1  954  954    0 #>  [945,]  945    1  955  955    0 #>  [946,]  946    1  956  956    0 #>  [947,]  947    1  957  957    0 #>  [948,]  948    1  958  958    0 #>  [949,]  949    1  959  959    0 #>  [950,]  950    1  960  960    0 #>  [951,]  951    1  961  961    0 #>  [952,]  952    1  962  962    0 #>  [953,]  953    1  963  963    0 #>  [954,]  954    1  964  964    0 #>  [955,]  955    1  965  965    0 #>  [956,]  956    1  966  966    0 #>  [957,]  957    1  967  967    0 #>  [958,]  958    1  968  968    0 #>  [959,]  959    1  969  969    0 #>  [960,]  960    1  970  970    0 #>  [961,]  961    1  971  971    0 #>  [962,]  962    1  972  972    0 #>  [963,]  963    1  973  973    0 #>  [964,]  964    1  974  974    0 #>  [965,]  965    1  975  975    0 #>  [966,]  966    1  976  976    0 #>  [967,]  967    1  977  977    0 #>  [968,]  968    1  978  978    0 #>  [969,]  969    1  979  979    0 #>  [970,]  970    1  980  980    0 #>  [971,]  971    1  981  981    0 #>  [972,]  972    1  982  982    0 #>  [973,]  973    1  983  983    0 #>  [974,]  974    1  984  984    0 #>  [975,]  975    1  985  985    0 #>  [976,]  976    1  986  986    0 #>  [977,]  977    1  987  987    0 #>  [978,]  978    1  988  988    0 #>  [979,]  979    1  989  989    0 #>  [980,]  980    1  990  990    0 #>  [981,]  981    1  991  991    0 #>  [982,]  982    1  992  992    0 #>  [983,]  983    1  993  993    0 #>  [984,]  984    1  994  994    0 #>  [985,]  985    1  995  995    0 #>  [986,]  986    1  996  996    0 #>  [987,]  987    1  997  997    0 #>  [988,]  988    1  998  998    0 #>  [989,]  989    1  999  999    0 #>  [990,]  990    1 1000 1000    0 #>  [991,]  991    1 1001 1001    0 #>  [992,]  992    1 1002 1002    0 #>  [993,]  993    1 1003 1003    0 #>  [994,]  994    1 1004 1004    0 #>  [995,]  995    1 1005 1005    0 #>  [996,]  996    1 1006 1006    0 #>  [997,]  997    1 1007 1007    0 #>  [998,]  998    1 1008 1008    0 #>  [999,]  999    1 1009 1009    0 #> [1000,] 1000    1 1010 1010    0  # dbSpatial dbSpatial::ST_Translate(tbl = db_points, dx = 10, dy = 10) |>   mutate(points = ST_AsText(geom)) |>   select(points) |>   compute(temporary = FALSE) #> Warning: The `name` argument of `compute()` must be provided when `temporary = FALSE` as #> of dbplyr 2.3.3. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> # Source:   table<dbplyr_001> [?? x 1] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    points        #>    <chr>         #>  1 POINT (11 11) #>  2 POINT (12 12) #>  3 POINT (13 13) #>  4 POINT (14 14) #>  5 POINT (15 15) #>  6 POINT (16 16) #>  7 POINT (17 17) #>  8 POINT (18 18) #>  9 POINT (19 19) #> 10 POINT (20 20) #> # ℹ more rows"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"flip","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Flip","title":"Spatial Operations","text":"","code":"# terra terra::geom(dummy_spatvector)  flipped_spatVector = terra::flip(dummy_spatvector, direction = \"vertical\")  terra::geom(flipped_spatVector)  # <----- not equivalent to terra::flip ------> # dbSpatial # db_points |> #   mutate(points = ST_AsText(geom)) #  # db_points |> #   mutate(flipped_points = ST_AsText(ST_FlipCoordinates(geom)))"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"is-valid","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Is.Valid","title":"Spatial Operations","text":"","code":"# terra terra::geom(dummy_spatvector) #>         geom part    x    y hole #>    [1,]    1    1    1    1    0 #>    [2,]    2    1    2    2    0 #>    [3,]    3    1    3    3    0 #>    [4,]    4    1    4    4    0 #>    [5,]    5    1    5    5    0 #>    [6,]    6    1    6    6    0 #>    [7,]    7    1    7    7    0 #>    [8,]    8    1    8    8    0 #>    [9,]    9    1    9    9    0 #>   [10,]   10    1   10   10    0 #>   [11,]   11    1   11   11    0 #>   [12,]   12    1   12   12    0 #>   [13,]   13    1   13   13    0 #>   [14,]   14    1   14   14    0 #>   [15,]   15    1   15   15    0 #>   [16,]   16    1   16   16    0 #>   [17,]   17    1   17   17    0 #>   [18,]   18    1   18   18    0 #>   [19,]   19    1   19   19    0 #>   [20,]   20    1   20   20    0 #>   [21,]   21    1   21   21    0 #>   [22,]   22    1   22   22    0 #>   [23,]   23    1   23   23    0 #>   [24,]   24    1   24   24    0 #>   [25,]   25    1   25   25    0 #>   [26,]   26    1   26   26    0 #>   [27,]   27    1   27   27    0 #>   [28,]   28    1   28   28    0 #>   [29,]   29    1   29   29    0 #>   [30,]   30    1   30   30    0 #>   [31,]   31    1   31   31    0 #>   [32,]   32    1   32   32    0 #>   [33,]   33    1   33   33    0 #>   [34,]   34    1   34   34    0 #>   [35,]   35    1   35   35    0 #>   [36,]   36    1   36   36    0 #>   [37,]   37    1   37   37    0 #>   [38,]   38    1   38   38    0 #>   [39,]   39    1   39   39    0 #>   [40,]   40    1   40   40    0 #>   [41,]   41    1   41   41    0 #>   [42,]   42    1   42   42    0 #>   [43,]   43    1   43   43    0 #>   [44,]   44    1   44   44    0 #>   [45,]   45    1   45   45    0 #>   [46,]   46    1   46   46    0 #>   [47,]   47    1   47   47    0 #>   [48,]   48    1   48   48    0 #>   [49,]   49    1   49   49    0 #>   [50,]   50    1   50   50    0 #>   [51,]   51    1   51   51    0 #>   [52,]   52    1   52   52    0 #>   [53,]   53    1   53   53    0 #>   [54,]   54    1   54   54    0 #>   [55,]   55    1   55   55    0 #>   [56,]   56    1   56   56    0 #>   [57,]   57    1   57   57    0 #>   [58,]   58    1   58   58    0 #>   [59,]   59    1   59   59    0 #>   [60,]   60    1   60   60    0 #>   [61,]   61    1   61   61    0 #>   [62,]   62    1   62   62    0 #>   [63,]   63    1   63   63    0 #>   [64,]   64    1   64   64    0 #>   [65,]   65    1   65   65    0 #>   [66,]   66    1   66   66    0 #>   [67,]   67    1   67   67    0 #>   [68,]   68    1   68   68    0 #>   [69,]   69    1   69   69    0 #>   [70,]   70    1   70   70    0 #>   [71,]   71    1   71   71    0 #>   [72,]   72    1   72   72    0 #>   [73,]   73    1   73   73    0 #>   [74,]   74    1   74   74    0 #>   [75,]   75    1   75   75    0 #>   [76,]   76    1   76   76    0 #>   [77,]   77    1   77   77    0 #>   [78,]   78    1   78   78    0 #>   [79,]   79    1   79   79    0 #>   [80,]   80    1   80   80    0 #>   [81,]   81    1   81   81    0 #>   [82,]   82    1   82   82    0 #>   [83,]   83    1   83   83    0 #>   [84,]   84    1   84   84    0 #>   [85,]   85    1   85   85    0 #>   [86,]   86    1   86   86    0 #>   [87,]   87    1   87   87    0 #>   [88,]   88    1   88   88    0 #>   [89,]   89    1   89   89    0 #>   [90,]   90    1   90   90    0 #>   [91,]   91    1   91   91    0 #>   [92,]   92    1   92   92    0 #>   [93,]   93    1   93   93    0 #>   [94,]   94    1   94   94    0 #>   [95,]   95    1   95   95    0 #>   [96,]   96    1   96   96    0 #>   [97,]   97    1   97   97    0 #>   [98,]   98    1   98   98    0 #>   [99,]   99    1   99   99    0 #>  [100,]  100    1  100  100    0 #>  [101,]  101    1  101  101    0 #>  [102,]  102    1  102  102    0 #>  [103,]  103    1  103  103    0 #>  [104,]  104    1  104  104    0 #>  [105,]  105    1  105  105    0 #>  [106,]  106    1  106  106    0 #>  [107,]  107    1  107  107    0 #>  [108,]  108    1  108  108    0 #>  [109,]  109    1  109  109    0 #>  [110,]  110    1  110  110    0 #>  [111,]  111    1  111  111    0 #>  [112,]  112    1  112  112    0 #>  [113,]  113    1  113  113    0 #>  [114,]  114    1  114  114    0 #>  [115,]  115    1  115  115    0 #>  [116,]  116    1  116  116    0 #>  [117,]  117    1  117  117    0 #>  [118,]  118    1  118  118    0 #>  [119,]  119    1  119  119    0 #>  [120,]  120    1  120  120    0 #>  [121,]  121    1  121  121    0 #>  [122,]  122    1  122  122    0 #>  [123,]  123    1  123  123    0 #>  [124,]  124    1  124  124    0 #>  [125,]  125    1  125  125    0 #>  [126,]  126    1  126  126    0 #>  [127,]  127    1  127  127    0 #>  [128,]  128    1  128  128    0 #>  [129,]  129    1  129  129    0 #>  [130,]  130    1  130  130    0 #>  [131,]  131    1  131  131    0 #>  [132,]  132    1  132  132    0 #>  [133,]  133    1  133  133    0 #>  [134,]  134    1  134  134    0 #>  [135,]  135    1  135  135    0 #>  [136,]  136    1  136  136    0 #>  [137,]  137    1  137  137    0 #>  [138,]  138    1  138  138    0 #>  [139,]  139    1  139  139    0 #>  [140,]  140    1  140  140    0 #>  [141,]  141    1  141  141    0 #>  [142,]  142    1  142  142    0 #>  [143,]  143    1  143  143    0 #>  [144,]  144    1  144  144    0 #>  [145,]  145    1  145  145    0 #>  [146,]  146    1  146  146    0 #>  [147,]  147    1  147  147    0 #>  [148,]  148    1  148  148    0 #>  [149,]  149    1  149  149    0 #>  [150,]  150    1  150  150    0 #>  [151,]  151    1  151  151    0 #>  [152,]  152    1  152  152    0 #>  [153,]  153    1  153  153    0 #>  [154,]  154    1  154  154    0 #>  [155,]  155    1  155  155    0 #>  [156,]  156    1  156  156    0 #>  [157,]  157    1  157  157    0 #>  [158,]  158    1  158  158    0 #>  [159,]  159    1  159  159    0 #>  [160,]  160    1  160  160    0 #>  [161,]  161    1  161  161    0 #>  [162,]  162    1  162  162    0 #>  [163,]  163    1  163  163    0 #>  [164,]  164    1  164  164    0 #>  [165,]  165    1  165  165    0 #>  [166,]  166    1  166  166    0 #>  [167,]  167    1  167  167    0 #>  [168,]  168    1  168  168    0 #>  [169,]  169    1  169  169    0 #>  [170,]  170    1  170  170    0 #>  [171,]  171    1  171  171    0 #>  [172,]  172    1  172  172    0 #>  [173,]  173    1  173  173    0 #>  [174,]  174    1  174  174    0 #>  [175,]  175    1  175  175    0 #>  [176,]  176    1  176  176    0 #>  [177,]  177    1  177  177    0 #>  [178,]  178    1  178  178    0 #>  [179,]  179    1  179  179    0 #>  [180,]  180    1  180  180    0 #>  [181,]  181    1  181  181    0 #>  [182,]  182    1  182  182    0 #>  [183,]  183    1  183  183    0 #>  [184,]  184    1  184  184    0 #>  [185,]  185    1  185  185    0 #>  [186,]  186    1  186  186    0 #>  [187,]  187    1  187  187    0 #>  [188,]  188    1  188  188    0 #>  [189,]  189    1  189  189    0 #>  [190,]  190    1  190  190    0 #>  [191,]  191    1  191  191    0 #>  [192,]  192    1  192  192    0 #>  [193,]  193    1  193  193    0 #>  [194,]  194    1  194  194    0 #>  [195,]  195    1  195  195    0 #>  [196,]  196    1  196  196    0 #>  [197,]  197    1  197  197    0 #>  [198,]  198    1  198  198    0 #>  [199,]  199    1  199  199    0 #>  [200,]  200    1  200  200    0 #>  [201,]  201    1  201  201    0 #>  [202,]  202    1  202  202    0 #>  [203,]  203    1  203  203    0 #>  [204,]  204    1  204  204    0 #>  [205,]  205    1  205  205    0 #>  [206,]  206    1  206  206    0 #>  [207,]  207    1  207  207    0 #>  [208,]  208    1  208  208    0 #>  [209,]  209    1  209  209    0 #>  [210,]  210    1  210  210    0 #>  [211,]  211    1  211  211    0 #>  [212,]  212    1  212  212    0 #>  [213,]  213    1  213  213    0 #>  [214,]  214    1  214  214    0 #>  [215,]  215    1  215  215    0 #>  [216,]  216    1  216  216    0 #>  [217,]  217    1  217  217    0 #>  [218,]  218    1  218  218    0 #>  [219,]  219    1  219  219    0 #>  [220,]  220    1  220  220    0 #>  [221,]  221    1  221  221    0 #>  [222,]  222    1  222  222    0 #>  [223,]  223    1  223  223    0 #>  [224,]  224    1  224  224    0 #>  [225,]  225    1  225  225    0 #>  [226,]  226    1  226  226    0 #>  [227,]  227    1  227  227    0 #>  [228,]  228    1  228  228    0 #>  [229,]  229    1  229  229    0 #>  [230,]  230    1  230  230    0 #>  [231,]  231    1  231  231    0 #>  [232,]  232    1  232  232    0 #>  [233,]  233    1  233  233    0 #>  [234,]  234    1  234  234    0 #>  [235,]  235    1  235  235    0 #>  [236,]  236    1  236  236    0 #>  [237,]  237    1  237  237    0 #>  [238,]  238    1  238  238    0 #>  [239,]  239    1  239  239    0 #>  [240,]  240    1  240  240    0 #>  [241,]  241    1  241  241    0 #>  [242,]  242    1  242  242    0 #>  [243,]  243    1  243  243    0 #>  [244,]  244    1  244  244    0 #>  [245,]  245    1  245  245    0 #>  [246,]  246    1  246  246    0 #>  [247,]  247    1  247  247    0 #>  [248,]  248    1  248  248    0 #>  [249,]  249    1  249  249    0 #>  [250,]  250    1  250  250    0 #>  [251,]  251    1  251  251    0 #>  [252,]  252    1  252  252    0 #>  [253,]  253    1  253  253    0 #>  [254,]  254    1  254  254    0 #>  [255,]  255    1  255  255    0 #>  [256,]  256    1  256  256    0 #>  [257,]  257    1  257  257    0 #>  [258,]  258    1  258  258    0 #>  [259,]  259    1  259  259    0 #>  [260,]  260    1  260  260    0 #>  [261,]  261    1  261  261    0 #>  [262,]  262    1  262  262    0 #>  [263,]  263    1  263  263    0 #>  [264,]  264    1  264  264    0 #>  [265,]  265    1  265  265    0 #>  [266,]  266    1  266  266    0 #>  [267,]  267    1  267  267    0 #>  [268,]  268    1  268  268    0 #>  [269,]  269    1  269  269    0 #>  [270,]  270    1  270  270    0 #>  [271,]  271    1  271  271    0 #>  [272,]  272    1  272  272    0 #>  [273,]  273    1  273  273    0 #>  [274,]  274    1  274  274    0 #>  [275,]  275    1  275  275    0 #>  [276,]  276    1  276  276    0 #>  [277,]  277    1  277  277    0 #>  [278,]  278    1  278  278    0 #>  [279,]  279    1  279  279    0 #>  [280,]  280    1  280  280    0 #>  [281,]  281    1  281  281    0 #>  [282,]  282    1  282  282    0 #>  [283,]  283    1  283  283    0 #>  [284,]  284    1  284  284    0 #>  [285,]  285    1  285  285    0 #>  [286,]  286    1  286  286    0 #>  [287,]  287    1  287  287    0 #>  [288,]  288    1  288  288    0 #>  [289,]  289    1  289  289    0 #>  [290,]  290    1  290  290    0 #>  [291,]  291    1  291  291    0 #>  [292,]  292    1  292  292    0 #>  [293,]  293    1  293  293    0 #>  [294,]  294    1  294  294    0 #>  [295,]  295    1  295  295    0 #>  [296,]  296    1  296  296    0 #>  [297,]  297    1  297  297    0 #>  [298,]  298    1  298  298    0 #>  [299,]  299    1  299  299    0 #>  [300,]  300    1  300  300    0 #>  [301,]  301    1  301  301    0 #>  [302,]  302    1  302  302    0 #>  [303,]  303    1  303  303    0 #>  [304,]  304    1  304  304    0 #>  [305,]  305    1  305  305    0 #>  [306,]  306    1  306  306    0 #>  [307,]  307    1  307  307    0 #>  [308,]  308    1  308  308    0 #>  [309,]  309    1  309  309    0 #>  [310,]  310    1  310  310    0 #>  [311,]  311    1  311  311    0 #>  [312,]  312    1  312  312    0 #>  [313,]  313    1  313  313    0 #>  [314,]  314    1  314  314    0 #>  [315,]  315    1  315  315    0 #>  [316,]  316    1  316  316    0 #>  [317,]  317    1  317  317    0 #>  [318,]  318    1  318  318    0 #>  [319,]  319    1  319  319    0 #>  [320,]  320    1  320  320    0 #>  [321,]  321    1  321  321    0 #>  [322,]  322    1  322  322    0 #>  [323,]  323    1  323  323    0 #>  [324,]  324    1  324  324    0 #>  [325,]  325    1  325  325    0 #>  [326,]  326    1  326  326    0 #>  [327,]  327    1  327  327    0 #>  [328,]  328    1  328  328    0 #>  [329,]  329    1  329  329    0 #>  [330,]  330    1  330  330    0 #>  [331,]  331    1  331  331    0 #>  [332,]  332    1  332  332    0 #>  [333,]  333    1  333  333    0 #>  [334,]  334    1  334  334    0 #>  [335,]  335    1  335  335    0 #>  [336,]  336    1  336  336    0 #>  [337,]  337    1  337  337    0 #>  [338,]  338    1  338  338    0 #>  [339,]  339    1  339  339    0 #>  [340,]  340    1  340  340    0 #>  [341,]  341    1  341  341    0 #>  [342,]  342    1  342  342    0 #>  [343,]  343    1  343  343    0 #>  [344,]  344    1  344  344    0 #>  [345,]  345    1  345  345    0 #>  [346,]  346    1  346  346    0 #>  [347,]  347    1  347  347    0 #>  [348,]  348    1  348  348    0 #>  [349,]  349    1  349  349    0 #>  [350,]  350    1  350  350    0 #>  [351,]  351    1  351  351    0 #>  [352,]  352    1  352  352    0 #>  [353,]  353    1  353  353    0 #>  [354,]  354    1  354  354    0 #>  [355,]  355    1  355  355    0 #>  [356,]  356    1  356  356    0 #>  [357,]  357    1  357  357    0 #>  [358,]  358    1  358  358    0 #>  [359,]  359    1  359  359    0 #>  [360,]  360    1  360  360    0 #>  [361,]  361    1  361  361    0 #>  [362,]  362    1  362  362    0 #>  [363,]  363    1  363  363    0 #>  [364,]  364    1  364  364    0 #>  [365,]  365    1  365  365    0 #>  [366,]  366    1  366  366    0 #>  [367,]  367    1  367  367    0 #>  [368,]  368    1  368  368    0 #>  [369,]  369    1  369  369    0 #>  [370,]  370    1  370  370    0 #>  [371,]  371    1  371  371    0 #>  [372,]  372    1  372  372    0 #>  [373,]  373    1  373  373    0 #>  [374,]  374    1  374  374    0 #>  [375,]  375    1  375  375    0 #>  [376,]  376    1  376  376    0 #>  [377,]  377    1  377  377    0 #>  [378,]  378    1  378  378    0 #>  [379,]  379    1  379  379    0 #>  [380,]  380    1  380  380    0 #>  [381,]  381    1  381  381    0 #>  [382,]  382    1  382  382    0 #>  [383,]  383    1  383  383    0 #>  [384,]  384    1  384  384    0 #>  [385,]  385    1  385  385    0 #>  [386,]  386    1  386  386    0 #>  [387,]  387    1  387  387    0 #>  [388,]  388    1  388  388    0 #>  [389,]  389    1  389  389    0 #>  [390,]  390    1  390  390    0 #>  [391,]  391    1  391  391    0 #>  [392,]  392    1  392  392    0 #>  [393,]  393    1  393  393    0 #>  [394,]  394    1  394  394    0 #>  [395,]  395    1  395  395    0 #>  [396,]  396    1  396  396    0 #>  [397,]  397    1  397  397    0 #>  [398,]  398    1  398  398    0 #>  [399,]  399    1  399  399    0 #>  [400,]  400    1  400  400    0 #>  [401,]  401    1  401  401    0 #>  [402,]  402    1  402  402    0 #>  [403,]  403    1  403  403    0 #>  [404,]  404    1  404  404    0 #>  [405,]  405    1  405  405    0 #>  [406,]  406    1  406  406    0 #>  [407,]  407    1  407  407    0 #>  [408,]  408    1  408  408    0 #>  [409,]  409    1  409  409    0 #>  [410,]  410    1  410  410    0 #>  [411,]  411    1  411  411    0 #>  [412,]  412    1  412  412    0 #>  [413,]  413    1  413  413    0 #>  [414,]  414    1  414  414    0 #>  [415,]  415    1  415  415    0 #>  [416,]  416    1  416  416    0 #>  [417,]  417    1  417  417    0 #>  [418,]  418    1  418  418    0 #>  [419,]  419    1  419  419    0 #>  [420,]  420    1  420  420    0 #>  [421,]  421    1  421  421    0 #>  [422,]  422    1  422  422    0 #>  [423,]  423    1  423  423    0 #>  [424,]  424    1  424  424    0 #>  [425,]  425    1  425  425    0 #>  [426,]  426    1  426  426    0 #>  [427,]  427    1  427  427    0 #>  [428,]  428    1  428  428    0 #>  [429,]  429    1  429  429    0 #>  [430,]  430    1  430  430    0 #>  [431,]  431    1  431  431    0 #>  [432,]  432    1  432  432    0 #>  [433,]  433    1  433  433    0 #>  [434,]  434    1  434  434    0 #>  [435,]  435    1  435  435    0 #>  [436,]  436    1  436  436    0 #>  [437,]  437    1  437  437    0 #>  [438,]  438    1  438  438    0 #>  [439,]  439    1  439  439    0 #>  [440,]  440    1  440  440    0 #>  [441,]  441    1  441  441    0 #>  [442,]  442    1  442  442    0 #>  [443,]  443    1  443  443    0 #>  [444,]  444    1  444  444    0 #>  [445,]  445    1  445  445    0 #>  [446,]  446    1  446  446    0 #>  [447,]  447    1  447  447    0 #>  [448,]  448    1  448  448    0 #>  [449,]  449    1  449  449    0 #>  [450,]  450    1  450  450    0 #>  [451,]  451    1  451  451    0 #>  [452,]  452    1  452  452    0 #>  [453,]  453    1  453  453    0 #>  [454,]  454    1  454  454    0 #>  [455,]  455    1  455  455    0 #>  [456,]  456    1  456  456    0 #>  [457,]  457    1  457  457    0 #>  [458,]  458    1  458  458    0 #>  [459,]  459    1  459  459    0 #>  [460,]  460    1  460  460    0 #>  [461,]  461    1  461  461    0 #>  [462,]  462    1  462  462    0 #>  [463,]  463    1  463  463    0 #>  [464,]  464    1  464  464    0 #>  [465,]  465    1  465  465    0 #>  [466,]  466    1  466  466    0 #>  [467,]  467    1  467  467    0 #>  [468,]  468    1  468  468    0 #>  [469,]  469    1  469  469    0 #>  [470,]  470    1  470  470    0 #>  [471,]  471    1  471  471    0 #>  [472,]  472    1  472  472    0 #>  [473,]  473    1  473  473    0 #>  [474,]  474    1  474  474    0 #>  [475,]  475    1  475  475    0 #>  [476,]  476    1  476  476    0 #>  [477,]  477    1  477  477    0 #>  [478,]  478    1  478  478    0 #>  [479,]  479    1  479  479    0 #>  [480,]  480    1  480  480    0 #>  [481,]  481    1  481  481    0 #>  [482,]  482    1  482  482    0 #>  [483,]  483    1  483  483    0 #>  [484,]  484    1  484  484    0 #>  [485,]  485    1  485  485    0 #>  [486,]  486    1  486  486    0 #>  [487,]  487    1  487  487    0 #>  [488,]  488    1  488  488    0 #>  [489,]  489    1  489  489    0 #>  [490,]  490    1  490  490    0 #>  [491,]  491    1  491  491    0 #>  [492,]  492    1  492  492    0 #>  [493,]  493    1  493  493    0 #>  [494,]  494    1  494  494    0 #>  [495,]  495    1  495  495    0 #>  [496,]  496    1  496  496    0 #>  [497,]  497    1  497  497    0 #>  [498,]  498    1  498  498    0 #>  [499,]  499    1  499  499    0 #>  [500,]  500    1  500  500    0 #>  [501,]  501    1  501  501    0 #>  [502,]  502    1  502  502    0 #>  [503,]  503    1  503  503    0 #>  [504,]  504    1  504  504    0 #>  [505,]  505    1  505  505    0 #>  [506,]  506    1  506  506    0 #>  [507,]  507    1  507  507    0 #>  [508,]  508    1  508  508    0 #>  [509,]  509    1  509  509    0 #>  [510,]  510    1  510  510    0 #>  [511,]  511    1  511  511    0 #>  [512,]  512    1  512  512    0 #>  [513,]  513    1  513  513    0 #>  [514,]  514    1  514  514    0 #>  [515,]  515    1  515  515    0 #>  [516,]  516    1  516  516    0 #>  [517,]  517    1  517  517    0 #>  [518,]  518    1  518  518    0 #>  [519,]  519    1  519  519    0 #>  [520,]  520    1  520  520    0 #>  [521,]  521    1  521  521    0 #>  [522,]  522    1  522  522    0 #>  [523,]  523    1  523  523    0 #>  [524,]  524    1  524  524    0 #>  [525,]  525    1  525  525    0 #>  [526,]  526    1  526  526    0 #>  [527,]  527    1  527  527    0 #>  [528,]  528    1  528  528    0 #>  [529,]  529    1  529  529    0 #>  [530,]  530    1  530  530    0 #>  [531,]  531    1  531  531    0 #>  [532,]  532    1  532  532    0 #>  [533,]  533    1  533  533    0 #>  [534,]  534    1  534  534    0 #>  [535,]  535    1  535  535    0 #>  [536,]  536    1  536  536    0 #>  [537,]  537    1  537  537    0 #>  [538,]  538    1  538  538    0 #>  [539,]  539    1  539  539    0 #>  [540,]  540    1  540  540    0 #>  [541,]  541    1  541  541    0 #>  [542,]  542    1  542  542    0 #>  [543,]  543    1  543  543    0 #>  [544,]  544    1  544  544    0 #>  [545,]  545    1  545  545    0 #>  [546,]  546    1  546  546    0 #>  [547,]  547    1  547  547    0 #>  [548,]  548    1  548  548    0 #>  [549,]  549    1  549  549    0 #>  [550,]  550    1  550  550    0 #>  [551,]  551    1  551  551    0 #>  [552,]  552    1  552  552    0 #>  [553,]  553    1  553  553    0 #>  [554,]  554    1  554  554    0 #>  [555,]  555    1  555  555    0 #>  [556,]  556    1  556  556    0 #>  [557,]  557    1  557  557    0 #>  [558,]  558    1  558  558    0 #>  [559,]  559    1  559  559    0 #>  [560,]  560    1  560  560    0 #>  [561,]  561    1  561  561    0 #>  [562,]  562    1  562  562    0 #>  [563,]  563    1  563  563    0 #>  [564,]  564    1  564  564    0 #>  [565,]  565    1  565  565    0 #>  [566,]  566    1  566  566    0 #>  [567,]  567    1  567  567    0 #>  [568,]  568    1  568  568    0 #>  [569,]  569    1  569  569    0 #>  [570,]  570    1  570  570    0 #>  [571,]  571    1  571  571    0 #>  [572,]  572    1  572  572    0 #>  [573,]  573    1  573  573    0 #>  [574,]  574    1  574  574    0 #>  [575,]  575    1  575  575    0 #>  [576,]  576    1  576  576    0 #>  [577,]  577    1  577  577    0 #>  [578,]  578    1  578  578    0 #>  [579,]  579    1  579  579    0 #>  [580,]  580    1  580  580    0 #>  [581,]  581    1  581  581    0 #>  [582,]  582    1  582  582    0 #>  [583,]  583    1  583  583    0 #>  [584,]  584    1  584  584    0 #>  [585,]  585    1  585  585    0 #>  [586,]  586    1  586  586    0 #>  [587,]  587    1  587  587    0 #>  [588,]  588    1  588  588    0 #>  [589,]  589    1  589  589    0 #>  [590,]  590    1  590  590    0 #>  [591,]  591    1  591  591    0 #>  [592,]  592    1  592  592    0 #>  [593,]  593    1  593  593    0 #>  [594,]  594    1  594  594    0 #>  [595,]  595    1  595  595    0 #>  [596,]  596    1  596  596    0 #>  [597,]  597    1  597  597    0 #>  [598,]  598    1  598  598    0 #>  [599,]  599    1  599  599    0 #>  [600,]  600    1  600  600    0 #>  [601,]  601    1  601  601    0 #>  [602,]  602    1  602  602    0 #>  [603,]  603    1  603  603    0 #>  [604,]  604    1  604  604    0 #>  [605,]  605    1  605  605    0 #>  [606,]  606    1  606  606    0 #>  [607,]  607    1  607  607    0 #>  [608,]  608    1  608  608    0 #>  [609,]  609    1  609  609    0 #>  [610,]  610    1  610  610    0 #>  [611,]  611    1  611  611    0 #>  [612,]  612    1  612  612    0 #>  [613,]  613    1  613  613    0 #>  [614,]  614    1  614  614    0 #>  [615,]  615    1  615  615    0 #>  [616,]  616    1  616  616    0 #>  [617,]  617    1  617  617    0 #>  [618,]  618    1  618  618    0 #>  [619,]  619    1  619  619    0 #>  [620,]  620    1  620  620    0 #>  [621,]  621    1  621  621    0 #>  [622,]  622    1  622  622    0 #>  [623,]  623    1  623  623    0 #>  [624,]  624    1  624  624    0 #>  [625,]  625    1  625  625    0 #>  [626,]  626    1  626  626    0 #>  [627,]  627    1  627  627    0 #>  [628,]  628    1  628  628    0 #>  [629,]  629    1  629  629    0 #>  [630,]  630    1  630  630    0 #>  [631,]  631    1  631  631    0 #>  [632,]  632    1  632  632    0 #>  [633,]  633    1  633  633    0 #>  [634,]  634    1  634  634    0 #>  [635,]  635    1  635  635    0 #>  [636,]  636    1  636  636    0 #>  [637,]  637    1  637  637    0 #>  [638,]  638    1  638  638    0 #>  [639,]  639    1  639  639    0 #>  [640,]  640    1  640  640    0 #>  [641,]  641    1  641  641    0 #>  [642,]  642    1  642  642    0 #>  [643,]  643    1  643  643    0 #>  [644,]  644    1  644  644    0 #>  [645,]  645    1  645  645    0 #>  [646,]  646    1  646  646    0 #>  [647,]  647    1  647  647    0 #>  [648,]  648    1  648  648    0 #>  [649,]  649    1  649  649    0 #>  [650,]  650    1  650  650    0 #>  [651,]  651    1  651  651    0 #>  [652,]  652    1  652  652    0 #>  [653,]  653    1  653  653    0 #>  [654,]  654    1  654  654    0 #>  [655,]  655    1  655  655    0 #>  [656,]  656    1  656  656    0 #>  [657,]  657    1  657  657    0 #>  [658,]  658    1  658  658    0 #>  [659,]  659    1  659  659    0 #>  [660,]  660    1  660  660    0 #>  [661,]  661    1  661  661    0 #>  [662,]  662    1  662  662    0 #>  [663,]  663    1  663  663    0 #>  [664,]  664    1  664  664    0 #>  [665,]  665    1  665  665    0 #>  [666,]  666    1  666  666    0 #>  [667,]  667    1  667  667    0 #>  [668,]  668    1  668  668    0 #>  [669,]  669    1  669  669    0 #>  [670,]  670    1  670  670    0 #>  [671,]  671    1  671  671    0 #>  [672,]  672    1  672  672    0 #>  [673,]  673    1  673  673    0 #>  [674,]  674    1  674  674    0 #>  [675,]  675    1  675  675    0 #>  [676,]  676    1  676  676    0 #>  [677,]  677    1  677  677    0 #>  [678,]  678    1  678  678    0 #>  [679,]  679    1  679  679    0 #>  [680,]  680    1  680  680    0 #>  [681,]  681    1  681  681    0 #>  [682,]  682    1  682  682    0 #>  [683,]  683    1  683  683    0 #>  [684,]  684    1  684  684    0 #>  [685,]  685    1  685  685    0 #>  [686,]  686    1  686  686    0 #>  [687,]  687    1  687  687    0 #>  [688,]  688    1  688  688    0 #>  [689,]  689    1  689  689    0 #>  [690,]  690    1  690  690    0 #>  [691,]  691    1  691  691    0 #>  [692,]  692    1  692  692    0 #>  [693,]  693    1  693  693    0 #>  [694,]  694    1  694  694    0 #>  [695,]  695    1  695  695    0 #>  [696,]  696    1  696  696    0 #>  [697,]  697    1  697  697    0 #>  [698,]  698    1  698  698    0 #>  [699,]  699    1  699  699    0 #>  [700,]  700    1  700  700    0 #>  [701,]  701    1  701  701    0 #>  [702,]  702    1  702  702    0 #>  [703,]  703    1  703  703    0 #>  [704,]  704    1  704  704    0 #>  [705,]  705    1  705  705    0 #>  [706,]  706    1  706  706    0 #>  [707,]  707    1  707  707    0 #>  [708,]  708    1  708  708    0 #>  [709,]  709    1  709  709    0 #>  [710,]  710    1  710  710    0 #>  [711,]  711    1  711  711    0 #>  [712,]  712    1  712  712    0 #>  [713,]  713    1  713  713    0 #>  [714,]  714    1  714  714    0 #>  [715,]  715    1  715  715    0 #>  [716,]  716    1  716  716    0 #>  [717,]  717    1  717  717    0 #>  [718,]  718    1  718  718    0 #>  [719,]  719    1  719  719    0 #>  [720,]  720    1  720  720    0 #>  [721,]  721    1  721  721    0 #>  [722,]  722    1  722  722    0 #>  [723,]  723    1  723  723    0 #>  [724,]  724    1  724  724    0 #>  [725,]  725    1  725  725    0 #>  [726,]  726    1  726  726    0 #>  [727,]  727    1  727  727    0 #>  [728,]  728    1  728  728    0 #>  [729,]  729    1  729  729    0 #>  [730,]  730    1  730  730    0 #>  [731,]  731    1  731  731    0 #>  [732,]  732    1  732  732    0 #>  [733,]  733    1  733  733    0 #>  [734,]  734    1  734  734    0 #>  [735,]  735    1  735  735    0 #>  [736,]  736    1  736  736    0 #>  [737,]  737    1  737  737    0 #>  [738,]  738    1  738  738    0 #>  [739,]  739    1  739  739    0 #>  [740,]  740    1  740  740    0 #>  [741,]  741    1  741  741    0 #>  [742,]  742    1  742  742    0 #>  [743,]  743    1  743  743    0 #>  [744,]  744    1  744  744    0 #>  [745,]  745    1  745  745    0 #>  [746,]  746    1  746  746    0 #>  [747,]  747    1  747  747    0 #>  [748,]  748    1  748  748    0 #>  [749,]  749    1  749  749    0 #>  [750,]  750    1  750  750    0 #>  [751,]  751    1  751  751    0 #>  [752,]  752    1  752  752    0 #>  [753,]  753    1  753  753    0 #>  [754,]  754    1  754  754    0 #>  [755,]  755    1  755  755    0 #>  [756,]  756    1  756  756    0 #>  [757,]  757    1  757  757    0 #>  [758,]  758    1  758  758    0 #>  [759,]  759    1  759  759    0 #>  [760,]  760    1  760  760    0 #>  [761,]  761    1  761  761    0 #>  [762,]  762    1  762  762    0 #>  [763,]  763    1  763  763    0 #>  [764,]  764    1  764  764    0 #>  [765,]  765    1  765  765    0 #>  [766,]  766    1  766  766    0 #>  [767,]  767    1  767  767    0 #>  [768,]  768    1  768  768    0 #>  [769,]  769    1  769  769    0 #>  [770,]  770    1  770  770    0 #>  [771,]  771    1  771  771    0 #>  [772,]  772    1  772  772    0 #>  [773,]  773    1  773  773    0 #>  [774,]  774    1  774  774    0 #>  [775,]  775    1  775  775    0 #>  [776,]  776    1  776  776    0 #>  [777,]  777    1  777  777    0 #>  [778,]  778    1  778  778    0 #>  [779,]  779    1  779  779    0 #>  [780,]  780    1  780  780    0 #>  [781,]  781    1  781  781    0 #>  [782,]  782    1  782  782    0 #>  [783,]  783    1  783  783    0 #>  [784,]  784    1  784  784    0 #>  [785,]  785    1  785  785    0 #>  [786,]  786    1  786  786    0 #>  [787,]  787    1  787  787    0 #>  [788,]  788    1  788  788    0 #>  [789,]  789    1  789  789    0 #>  [790,]  790    1  790  790    0 #>  [791,]  791    1  791  791    0 #>  [792,]  792    1  792  792    0 #>  [793,]  793    1  793  793    0 #>  [794,]  794    1  794  794    0 #>  [795,]  795    1  795  795    0 #>  [796,]  796    1  796  796    0 #>  [797,]  797    1  797  797    0 #>  [798,]  798    1  798  798    0 #>  [799,]  799    1  799  799    0 #>  [800,]  800    1  800  800    0 #>  [801,]  801    1  801  801    0 #>  [802,]  802    1  802  802    0 #>  [803,]  803    1  803  803    0 #>  [804,]  804    1  804  804    0 #>  [805,]  805    1  805  805    0 #>  [806,]  806    1  806  806    0 #>  [807,]  807    1  807  807    0 #>  [808,]  808    1  808  808    0 #>  [809,]  809    1  809  809    0 #>  [810,]  810    1  810  810    0 #>  [811,]  811    1  811  811    0 #>  [812,]  812    1  812  812    0 #>  [813,]  813    1  813  813    0 #>  [814,]  814    1  814  814    0 #>  [815,]  815    1  815  815    0 #>  [816,]  816    1  816  816    0 #>  [817,]  817    1  817  817    0 #>  [818,]  818    1  818  818    0 #>  [819,]  819    1  819  819    0 #>  [820,]  820    1  820  820    0 #>  [821,]  821    1  821  821    0 #>  [822,]  822    1  822  822    0 #>  [823,]  823    1  823  823    0 #>  [824,]  824    1  824  824    0 #>  [825,]  825    1  825  825    0 #>  [826,]  826    1  826  826    0 #>  [827,]  827    1  827  827    0 #>  [828,]  828    1  828  828    0 #>  [829,]  829    1  829  829    0 #>  [830,]  830    1  830  830    0 #>  [831,]  831    1  831  831    0 #>  [832,]  832    1  832  832    0 #>  [833,]  833    1  833  833    0 #>  [834,]  834    1  834  834    0 #>  [835,]  835    1  835  835    0 #>  [836,]  836    1  836  836    0 #>  [837,]  837    1  837  837    0 #>  [838,]  838    1  838  838    0 #>  [839,]  839    1  839  839    0 #>  [840,]  840    1  840  840    0 #>  [841,]  841    1  841  841    0 #>  [842,]  842    1  842  842    0 #>  [843,]  843    1  843  843    0 #>  [844,]  844    1  844  844    0 #>  [845,]  845    1  845  845    0 #>  [846,]  846    1  846  846    0 #>  [847,]  847    1  847  847    0 #>  [848,]  848    1  848  848    0 #>  [849,]  849    1  849  849    0 #>  [850,]  850    1  850  850    0 #>  [851,]  851    1  851  851    0 #>  [852,]  852    1  852  852    0 #>  [853,]  853    1  853  853    0 #>  [854,]  854    1  854  854    0 #>  [855,]  855    1  855  855    0 #>  [856,]  856    1  856  856    0 #>  [857,]  857    1  857  857    0 #>  [858,]  858    1  858  858    0 #>  [859,]  859    1  859  859    0 #>  [860,]  860    1  860  860    0 #>  [861,]  861    1  861  861    0 #>  [862,]  862    1  862  862    0 #>  [863,]  863    1  863  863    0 #>  [864,]  864    1  864  864    0 #>  [865,]  865    1  865  865    0 #>  [866,]  866    1  866  866    0 #>  [867,]  867    1  867  867    0 #>  [868,]  868    1  868  868    0 #>  [869,]  869    1  869  869    0 #>  [870,]  870    1  870  870    0 #>  [871,]  871    1  871  871    0 #>  [872,]  872    1  872  872    0 #>  [873,]  873    1  873  873    0 #>  [874,]  874    1  874  874    0 #>  [875,]  875    1  875  875    0 #>  [876,]  876    1  876  876    0 #>  [877,]  877    1  877  877    0 #>  [878,]  878    1  878  878    0 #>  [879,]  879    1  879  879    0 #>  [880,]  880    1  880  880    0 #>  [881,]  881    1  881  881    0 #>  [882,]  882    1  882  882    0 #>  [883,]  883    1  883  883    0 #>  [884,]  884    1  884  884    0 #>  [885,]  885    1  885  885    0 #>  [886,]  886    1  886  886    0 #>  [887,]  887    1  887  887    0 #>  [888,]  888    1  888  888    0 #>  [889,]  889    1  889  889    0 #>  [890,]  890    1  890  890    0 #>  [891,]  891    1  891  891    0 #>  [892,]  892    1  892  892    0 #>  [893,]  893    1  893  893    0 #>  [894,]  894    1  894  894    0 #>  [895,]  895    1  895  895    0 #>  [896,]  896    1  896  896    0 #>  [897,]  897    1  897  897    0 #>  [898,]  898    1  898  898    0 #>  [899,]  899    1  899  899    0 #>  [900,]  900    1  900  900    0 #>  [901,]  901    1  901  901    0 #>  [902,]  902    1  902  902    0 #>  [903,]  903    1  903  903    0 #>  [904,]  904    1  904  904    0 #>  [905,]  905    1  905  905    0 #>  [906,]  906    1  906  906    0 #>  [907,]  907    1  907  907    0 #>  [908,]  908    1  908  908    0 #>  [909,]  909    1  909  909    0 #>  [910,]  910    1  910  910    0 #>  [911,]  911    1  911  911    0 #>  [912,]  912    1  912  912    0 #>  [913,]  913    1  913  913    0 #>  [914,]  914    1  914  914    0 #>  [915,]  915    1  915  915    0 #>  [916,]  916    1  916  916    0 #>  [917,]  917    1  917  917    0 #>  [918,]  918    1  918  918    0 #>  [919,]  919    1  919  919    0 #>  [920,]  920    1  920  920    0 #>  [921,]  921    1  921  921    0 #>  [922,]  922    1  922  922    0 #>  [923,]  923    1  923  923    0 #>  [924,]  924    1  924  924    0 #>  [925,]  925    1  925  925    0 #>  [926,]  926    1  926  926    0 #>  [927,]  927    1  927  927    0 #>  [928,]  928    1  928  928    0 #>  [929,]  929    1  929  929    0 #>  [930,]  930    1  930  930    0 #>  [931,]  931    1  931  931    0 #>  [932,]  932    1  932  932    0 #>  [933,]  933    1  933  933    0 #>  [934,]  934    1  934  934    0 #>  [935,]  935    1  935  935    0 #>  [936,]  936    1  936  936    0 #>  [937,]  937    1  937  937    0 #>  [938,]  938    1  938  938    0 #>  [939,]  939    1  939  939    0 #>  [940,]  940    1  940  940    0 #>  [941,]  941    1  941  941    0 #>  [942,]  942    1  942  942    0 #>  [943,]  943    1  943  943    0 #>  [944,]  944    1  944  944    0 #>  [945,]  945    1  945  945    0 #>  [946,]  946    1  946  946    0 #>  [947,]  947    1  947  947    0 #>  [948,]  948    1  948  948    0 #>  [949,]  949    1  949  949    0 #>  [950,]  950    1  950  950    0 #>  [951,]  951    1  951  951    0 #>  [952,]  952    1  952  952    0 #>  [953,]  953    1  953  953    0 #>  [954,]  954    1  954  954    0 #>  [955,]  955    1  955  955    0 #>  [956,]  956    1  956  956    0 #>  [957,]  957    1  957  957    0 #>  [958,]  958    1  958  958    0 #>  [959,]  959    1  959  959    0 #>  [960,]  960    1  960  960    0 #>  [961,]  961    1  961  961    0 #>  [962,]  962    1  962  962    0 #>  [963,]  963    1  963  963    0 #>  [964,]  964    1  964  964    0 #>  [965,]  965    1  965  965    0 #>  [966,]  966    1  966  966    0 #>  [967,]  967    1  967  967    0 #>  [968,]  968    1  968  968    0 #>  [969,]  969    1  969  969    0 #>  [970,]  970    1  970  970    0 #>  [971,]  971    1  971  971    0 #>  [972,]  972    1  972  972    0 #>  [973,]  973    1  973  973    0 #>  [974,]  974    1  974  974    0 #>  [975,]  975    1  975  975    0 #>  [976,]  976    1  976  976    0 #>  [977,]  977    1  977  977    0 #>  [978,]  978    1  978  978    0 #>  [979,]  979    1  979  979    0 #>  [980,]  980    1  980  980    0 #>  [981,]  981    1  981  981    0 #>  [982,]  982    1  982  982    0 #>  [983,]  983    1  983  983    0 #>  [984,]  984    1  984  984    0 #>  [985,]  985    1  985  985    0 #>  [986,]  986    1  986  986    0 #>  [987,]  987    1  987  987    0 #>  [988,]  988    1  988  988    0 #>  [989,]  989    1  989  989    0 #>  [990,]  990    1  990  990    0 #>  [991,]  991    1  991  991    0 #>  [992,]  992    1  992  992    0 #>  [993,]  993    1  993  993    0 #>  [994,]  994    1  994  994    0 #>  [995,]  995    1  995  995    0 #>  [996,]  996    1  996  996    0 #>  [997,]  997    1  997  997    0 #>  [998,]  998    1  998  998    0 #>  [999,]  999    1  999  999    0 #> [1000,] 1000    1 1000 1000    0  terra::is.valid(dummy_spatvectordbSpatial db_points |>   dplyr::mutate(points = ST_AsText(geom)) |>   dplyr::select(points) #> # Source:   SQL [?? x 1] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    points        #>    <chr>         #>  1 POINT (1 1)   #>  2 POINT (2 2)   #>  3 POINT (3 3)   #>  4 POINT (4 4)   #>  5 POINT (5 5)   #>  6 POINT (6 6)   #>  7 POINT (7 7)   #>  8 POINT (8 8)   #>  9 POINT (9 9)   #> 10 POINT (10 10) #> # ℹ more rows  dbSpatial::ST_IsValid(tbl = db_points},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"y-x-max","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Y, X Max","title":"Spatial Operations","text":"","code":"# terra terra::geom(dummy_spatvector) #>         geom part    x    y hole #>    [1,]    1    1    1    1    0 #>    [2,]    2    1    2    2    0 #>    [3,]    3    1    3    3    0 #>    [4,]    4    1    4    4    0 #>    [5,]    5    1    5    5    0 #>    [6,]    6    1    6    6    0 #>    [7,]    7    1    7    7    0 #>    [8,]    8    1    8    8    0 #>    [9,]    9    1    9    9    0 #>   [10,]   10    1   10   10    0 #>   [11,]   11    1   11   11    0 #>   [12,]   12    1   12   12    0 #>   [13,]   13    1   13   13    0 #>   [14,]   14    1   14   14    0 #>   [15,]   15    1   15   15    0 #>   [16,]   16    1   16   16    0 #>   [17,]   17    1   17   17    0 #>   [18,]   18    1   18   18    0 #>   [19,]   19    1   19   19    0 #>   [20,]   20    1   20   20    0 #>   [21,]   21    1   21   21    0 #>   [22,]   22    1   22   22    0 #>   [23,]   23    1   23   23    0 #>   [24,]   24    1   24   24    0 #>   [25,]   25    1   25   25    0 #>   [26,]   26    1   26   26    0 #>   [27,]   27    1   27   27    0 #>   [28,]   28    1   28   28    0 #>   [29,]   29    1   29   29    0 #>   [30,]   30    1   30   30    0 #>   [31,]   31    1   31   31    0 #>   [32,]   32    1   32   32    0 #>   [33,]   33    1   33   33    0 #>   [34,]   34    1   34   34    0 #>   [35,]   35    1   35   35    0 #>   [36,]   36    1   36   36    0 #>   [37,]   37    1   37   37    0 #>   [38,]   38    1   38   38    0 #>   [39,]   39    1   39   39    0 #>   [40,]   40    1   40   40    0 #>   [41,]   41    1   41   41    0 #>   [42,]   42    1   42   42    0 #>   [43,]   43    1   43   43    0 #>   [44,]   44    1   44   44    0 #>   [45,]   45    1   45   45    0 #>   [46,]   46    1   46   46    0 #>   [47,]   47    1   47   47    0 #>   [48,]   48    1   48   48    0 #>   [49,]   49    1   49   49    0 #>   [50,]   50    1   50   50    0 #>   [51,]   51    1   51   51    0 #>   [52,]   52    1   52   52    0 #>   [53,]   53    1   53   53    0 #>   [54,]   54    1   54   54    0 #>   [55,]   55    1   55   55    0 #>   [56,]   56    1   56   56    0 #>   [57,]   57    1   57   57    0 #>   [58,]   58    1   58   58    0 #>   [59,]   59    1   59   59    0 #>   [60,]   60    1   60   60    0 #>   [61,]   61    1   61   61    0 #>   [62,]   62    1   62   62    0 #>   [63,]   63    1   63   63    0 #>   [64,]   64    1   64   64    0 #>   [65,]   65    1   65   65    0 #>   [66,]   66    1   66   66    0 #>   [67,]   67    1   67   67    0 #>   [68,]   68    1   68   68    0 #>   [69,]   69    1   69   69    0 #>   [70,]   70    1   70   70    0 #>   [71,]   71    1   71   71    0 #>   [72,]   72    1   72   72    0 #>   [73,]   73    1   73   73    0 #>   [74,]   74    1   74   74    0 #>   [75,]   75    1   75   75    0 #>   [76,]   76    1   76   76    0 #>   [77,]   77    1   77   77    0 #>   [78,]   78    1   78   78    0 #>   [79,]   79    1   79   79    0 #>   [80,]   80    1   80   80    0 #>   [81,]   81    1   81   81    0 #>   [82,]   82    1   82   82    0 #>   [83,]   83    1   83   83    0 #>   [84,]   84    1   84   84    0 #>   [85,]   85    1   85   85    0 #>   [86,]   86    1   86   86    0 #>   [87,]   87    1   87   87    0 #>   [88,]   88    1   88   88    0 #>   [89,]   89    1   89   89    0 #>   [90,]   90    1   90   90    0 #>   [91,]   91    1   91   91    0 #>   [92,]   92    1   92   92    0 #>   [93,]   93    1   93   93    0 #>   [94,]   94    1   94   94    0 #>   [95,]   95    1   95   95    0 #>   [96,]   96    1   96   96    0 #>   [97,]   97    1   97   97    0 #>   [98,]   98    1   98   98    0 #>   [99,]   99    1   99   99    0 #>  [100,]  100    1  100  100    0 #>  [101,]  101    1  101  101    0 #>  [102,]  102    1  102  102    0 #>  [103,]  103    1  103  103    0 #>  [104,]  104    1  104  104    0 #>  [105,]  105    1  105  105    0 #>  [106,]  106    1  106  106    0 #>  [107,]  107    1  107  107    0 #>  [108,]  108    1  108  108    0 #>  [109,]  109    1  109  109    0 #>  [110,]  110    1  110  110    0 #>  [111,]  111    1  111  111    0 #>  [112,]  112    1  112  112    0 #>  [113,]  113    1  113  113    0 #>  [114,]  114    1  114  114    0 #>  [115,]  115    1  115  115    0 #>  [116,]  116    1  116  116    0 #>  [117,]  117    1  117  117    0 #>  [118,]  118    1  118  118    0 #>  [119,]  119    1  119  119    0 #>  [120,]  120    1  120  120    0 #>  [121,]  121    1  121  121    0 #>  [122,]  122    1  122  122    0 #>  [123,]  123    1  123  123    0 #>  [124,]  124    1  124  124    0 #>  [125,]  125    1  125  125    0 #>  [126,]  126    1  126  126    0 #>  [127,]  127    1  127  127    0 #>  [128,]  128    1  128  128    0 #>  [129,]  129    1  129  129    0 #>  [130,]  130    1  130  130    0 #>  [131,]  131    1  131  131    0 #>  [132,]  132    1  132  132    0 #>  [133,]  133    1  133  133    0 #>  [134,]  134    1  134  134    0 #>  [135,]  135    1  135  135    0 #>  [136,]  136    1  136  136    0 #>  [137,]  137    1  137  137    0 #>  [138,]  138    1  138  138    0 #>  [139,]  139    1  139  139    0 #>  [140,]  140    1  140  140    0 #>  [141,]  141    1  141  141    0 #>  [142,]  142    1  142  142    0 #>  [143,]  143    1  143  143    0 #>  [144,]  144    1  144  144    0 #>  [145,]  145    1  145  145    0 #>  [146,]  146    1  146  146    0 #>  [147,]  147    1  147  147    0 #>  [148,]  148    1  148  148    0 #>  [149,]  149    1  149  149    0 #>  [150,]  150    1  150  150    0 #>  [151,]  151    1  151  151    0 #>  [152,]  152    1  152  152    0 #>  [153,]  153    1  153  153    0 #>  [154,]  154    1  154  154    0 #>  [155,]  155    1  155  155    0 #>  [156,]  156    1  156  156    0 #>  [157,]  157    1  157  157    0 #>  [158,]  158    1  158  158    0 #>  [159,]  159    1  159  159    0 #>  [160,]  160    1  160  160    0 #>  [161,]  161    1  161  161    0 #>  [162,]  162    1  162  162    0 #>  [163,]  163    1  163  163    0 #>  [164,]  164    1  164  164    0 #>  [165,]  165    1  165  165    0 #>  [166,]  166    1  166  166    0 #>  [167,]  167    1  167  167    0 #>  [168,]  168    1  168  168    0 #>  [169,]  169    1  169  169    0 #>  [170,]  170    1  170  170    0 #>  [171,]  171    1  171  171    0 #>  [172,]  172    1  172  172    0 #>  [173,]  173    1  173  173    0 #>  [174,]  174    1  174  174    0 #>  [175,]  175    1  175  175    0 #>  [176,]  176    1  176  176    0 #>  [177,]  177    1  177  177    0 #>  [178,]  178    1  178  178    0 #>  [179,]  179    1  179  179    0 #>  [180,]  180    1  180  180    0 #>  [181,]  181    1  181  181    0 #>  [182,]  182    1  182  182    0 #>  [183,]  183    1  183  183    0 #>  [184,]  184    1  184  184    0 #>  [185,]  185    1  185  185    0 #>  [186,]  186    1  186  186    0 #>  [187,]  187    1  187  187    0 #>  [188,]  188    1  188  188    0 #>  [189,]  189    1  189  189    0 #>  [190,]  190    1  190  190    0 #>  [191,]  191    1  191  191    0 #>  [192,]  192    1  192  192    0 #>  [193,]  193    1  193  193    0 #>  [194,]  194    1  194  194    0 #>  [195,]  195    1  195  195    0 #>  [196,]  196    1  196  196    0 #>  [197,]  197    1  197  197    0 #>  [198,]  198    1  198  198    0 #>  [199,]  199    1  199  199    0 #>  [200,]  200    1  200  200    0 #>  [201,]  201    1  201  201    0 #>  [202,]  202    1  202  202    0 #>  [203,]  203    1  203  203    0 #>  [204,]  204    1  204  204    0 #>  [205,]  205    1  205  205    0 #>  [206,]  206    1  206  206    0 #>  [207,]  207    1  207  207    0 #>  [208,]  208    1  208  208    0 #>  [209,]  209    1  209  209    0 #>  [210,]  210    1  210  210    0 #>  [211,]  211    1  211  211    0 #>  [212,]  212    1  212  212    0 #>  [213,]  213    1  213  213    0 #>  [214,]  214    1  214  214    0 #>  [215,]  215    1  215  215    0 #>  [216,]  216    1  216  216    0 #>  [217,]  217    1  217  217    0 #>  [218,]  218    1  218  218    0 #>  [219,]  219    1  219  219    0 #>  [220,]  220    1  220  220    0 #>  [221,]  221    1  221  221    0 #>  [222,]  222    1  222  222    0 #>  [223,]  223    1  223  223    0 #>  [224,]  224    1  224  224    0 #>  [225,]  225    1  225  225    0 #>  [226,]  226    1  226  226    0 #>  [227,]  227    1  227  227    0 #>  [228,]  228    1  228  228    0 #>  [229,]  229    1  229  229    0 #>  [230,]  230    1  230  230    0 #>  [231,]  231    1  231  231    0 #>  [232,]  232    1  232  232    0 #>  [233,]  233    1  233  233    0 #>  [234,]  234    1  234  234    0 #>  [235,]  235    1  235  235    0 #>  [236,]  236    1  236  236    0 #>  [237,]  237    1  237  237    0 #>  [238,]  238    1  238  238    0 #>  [239,]  239    1  239  239    0 #>  [240,]  240    1  240  240    0 #>  [241,]  241    1  241  241    0 #>  [242,]  242    1  242  242    0 #>  [243,]  243    1  243  243    0 #>  [244,]  244    1  244  244    0 #>  [245,]  245    1  245  245    0 #>  [246,]  246    1  246  246    0 #>  [247,]  247    1  247  247    0 #>  [248,]  248    1  248  248    0 #>  [249,]  249    1  249  249    0 #>  [250,]  250    1  250  250    0 #>  [251,]  251    1  251  251    0 #>  [252,]  252    1  252  252    0 #>  [253,]  253    1  253  253    0 #>  [254,]  254    1  254  254    0 #>  [255,]  255    1  255  255    0 #>  [256,]  256    1  256  256    0 #>  [257,]  257    1  257  257    0 #>  [258,]  258    1  258  258    0 #>  [259,]  259    1  259  259    0 #>  [260,]  260    1  260  260    0 #>  [261,]  261    1  261  261    0 #>  [262,]  262    1  262  262    0 #>  [263,]  263    1  263  263    0 #>  [264,]  264    1  264  264    0 #>  [265,]  265    1  265  265    0 #>  [266,]  266    1  266  266    0 #>  [267,]  267    1  267  267    0 #>  [268,]  268    1  268  268    0 #>  [269,]  269    1  269  269    0 #>  [270,]  270    1  270  270    0 #>  [271,]  271    1  271  271    0 #>  [272,]  272    1  272  272    0 #>  [273,]  273    1  273  273    0 #>  [274,]  274    1  274  274    0 #>  [275,]  275    1  275  275    0 #>  [276,]  276    1  276  276    0 #>  [277,]  277    1  277  277    0 #>  [278,]  278    1  278  278    0 #>  [279,]  279    1  279  279    0 #>  [280,]  280    1  280  280    0 #>  [281,]  281    1  281  281    0 #>  [282,]  282    1  282  282    0 #>  [283,]  283    1  283  283    0 #>  [284,]  284    1  284  284    0 #>  [285,]  285    1  285  285    0 #>  [286,]  286    1  286  286    0 #>  [287,]  287    1  287  287    0 #>  [288,]  288    1  288  288    0 #>  [289,]  289    1  289  289    0 #>  [290,]  290    1  290  290    0 #>  [291,]  291    1  291  291    0 #>  [292,]  292    1  292  292    0 #>  [293,]  293    1  293  293    0 #>  [294,]  294    1  294  294    0 #>  [295,]  295    1  295  295    0 #>  [296,]  296    1  296  296    0 #>  [297,]  297    1  297  297    0 #>  [298,]  298    1  298  298    0 #>  [299,]  299    1  299  299    0 #>  [300,]  300    1  300  300    0 #>  [301,]  301    1  301  301    0 #>  [302,]  302    1  302  302    0 #>  [303,]  303    1  303  303    0 #>  [304,]  304    1  304  304    0 #>  [305,]  305    1  305  305    0 #>  [306,]  306    1  306  306    0 #>  [307,]  307    1  307  307    0 #>  [308,]  308    1  308  308    0 #>  [309,]  309    1  309  309    0 #>  [310,]  310    1  310  310    0 #>  [311,]  311    1  311  311    0 #>  [312,]  312    1  312  312    0 #>  [313,]  313    1  313  313    0 #>  [314,]  314    1  314  314    0 #>  [315,]  315    1  315  315    0 #>  [316,]  316    1  316  316    0 #>  [317,]  317    1  317  317    0 #>  [318,]  318    1  318  318    0 #>  [319,]  319    1  319  319    0 #>  [320,]  320    1  320  320    0 #>  [321,]  321    1  321  321    0 #>  [322,]  322    1  322  322    0 #>  [323,]  323    1  323  323    0 #>  [324,]  324    1  324  324    0 #>  [325,]  325    1  325  325    0 #>  [326,]  326    1  326  326    0 #>  [327,]  327    1  327  327    0 #>  [328,]  328    1  328  328    0 #>  [329,]  329    1  329  329    0 #>  [330,]  330    1  330  330    0 #>  [331,]  331    1  331  331    0 #>  [332,]  332    1  332  332    0 #>  [333,]  333    1  333  333    0 #>  [334,]  334    1  334  334    0 #>  [335,]  335    1  335  335    0 #>  [336,]  336    1  336  336    0 #>  [337,]  337    1  337  337    0 #>  [338,]  338    1  338  338    0 #>  [339,]  339    1  339  339    0 #>  [340,]  340    1  340  340    0 #>  [341,]  341    1  341  341    0 #>  [342,]  342    1  342  342    0 #>  [343,]  343    1  343  343    0 #>  [344,]  344    1  344  344    0 #>  [345,]  345    1  345  345    0 #>  [346,]  346    1  346  346    0 #>  [347,]  347    1  347  347    0 #>  [348,]  348    1  348  348    0 #>  [349,]  349    1  349  349    0 #>  [350,]  350    1  350  350    0 #>  [351,]  351    1  351  351    0 #>  [352,]  352    1  352  352    0 #>  [353,]  353    1  353  353    0 #>  [354,]  354    1  354  354    0 #>  [355,]  355    1  355  355    0 #>  [356,]  356    1  356  356    0 #>  [357,]  357    1  357  357    0 #>  [358,]  358    1  358  358    0 #>  [359,]  359    1  359  359    0 #>  [360,]  360    1  360  360    0 #>  [361,]  361    1  361  361    0 #>  [362,]  362    1  362  362    0 #>  [363,]  363    1  363  363    0 #>  [364,]  364    1  364  364    0 #>  [365,]  365    1  365  365    0 #>  [366,]  366    1  366  366    0 #>  [367,]  367    1  367  367    0 #>  [368,]  368    1  368  368    0 #>  [369,]  369    1  369  369    0 #>  [370,]  370    1  370  370    0 #>  [371,]  371    1  371  371    0 #>  [372,]  372    1  372  372    0 #>  [373,]  373    1  373  373    0 #>  [374,]  374    1  374  374    0 #>  [375,]  375    1  375  375    0 #>  [376,]  376    1  376  376    0 #>  [377,]  377    1  377  377    0 #>  [378,]  378    1  378  378    0 #>  [379,]  379    1  379  379    0 #>  [380,]  380    1  380  380    0 #>  [381,]  381    1  381  381    0 #>  [382,]  382    1  382  382    0 #>  [383,]  383    1  383  383    0 #>  [384,]  384    1  384  384    0 #>  [385,]  385    1  385  385    0 #>  [386,]  386    1  386  386    0 #>  [387,]  387    1  387  387    0 #>  [388,]  388    1  388  388    0 #>  [389,]  389    1  389  389    0 #>  [390,]  390    1  390  390    0 #>  [391,]  391    1  391  391    0 #>  [392,]  392    1  392  392    0 #>  [393,]  393    1  393  393    0 #>  [394,]  394    1  394  394    0 #>  [395,]  395    1  395  395    0 #>  [396,]  396    1  396  396    0 #>  [397,]  397    1  397  397    0 #>  [398,]  398    1  398  398    0 #>  [399,]  399    1  399  399    0 #>  [400,]  400    1  400  400    0 #>  [401,]  401    1  401  401    0 #>  [402,]  402    1  402  402    0 #>  [403,]  403    1  403  403    0 #>  [404,]  404    1  404  404    0 #>  [405,]  405    1  405  405    0 #>  [406,]  406    1  406  406    0 #>  [407,]  407    1  407  407    0 #>  [408,]  408    1  408  408    0 #>  [409,]  409    1  409  409    0 #>  [410,]  410    1  410  410    0 #>  [411,]  411    1  411  411    0 #>  [412,]  412    1  412  412    0 #>  [413,]  413    1  413  413    0 #>  [414,]  414    1  414  414    0 #>  [415,]  415    1  415  415    0 #>  [416,]  416    1  416  416    0 #>  [417,]  417    1  417  417    0 #>  [418,]  418    1  418  418    0 #>  [419,]  419    1  419  419    0 #>  [420,]  420    1  420  420    0 #>  [421,]  421    1  421  421    0 #>  [422,]  422    1  422  422    0 #>  [423,]  423    1  423  423    0 #>  [424,]  424    1  424  424    0 #>  [425,]  425    1  425  425    0 #>  [426,]  426    1  426  426    0 #>  [427,]  427    1  427  427    0 #>  [428,]  428    1  428  428    0 #>  [429,]  429    1  429  429    0 #>  [430,]  430    1  430  430    0 #>  [431,]  431    1  431  431    0 #>  [432,]  432    1  432  432    0 #>  [433,]  433    1  433  433    0 #>  [434,]  434    1  434  434    0 #>  [435,]  435    1  435  435    0 #>  [436,]  436    1  436  436    0 #>  [437,]  437    1  437  437    0 #>  [438,]  438    1  438  438    0 #>  [439,]  439    1  439  439    0 #>  [440,]  440    1  440  440    0 #>  [441,]  441    1  441  441    0 #>  [442,]  442    1  442  442    0 #>  [443,]  443    1  443  443    0 #>  [444,]  444    1  444  444    0 #>  [445,]  445    1  445  445    0 #>  [446,]  446    1  446  446    0 #>  [447,]  447    1  447  447    0 #>  [448,]  448    1  448  448    0 #>  [449,]  449    1  449  449    0 #>  [450,]  450    1  450  450    0 #>  [451,]  451    1  451  451    0 #>  [452,]  452    1  452  452    0 #>  [453,]  453    1  453  453    0 #>  [454,]  454    1  454  454    0 #>  [455,]  455    1  455  455    0 #>  [456,]  456    1  456  456    0 #>  [457,]  457    1  457  457    0 #>  [458,]  458    1  458  458    0 #>  [459,]  459    1  459  459    0 #>  [460,]  460    1  460  460    0 #>  [461,]  461    1  461  461    0 #>  [462,]  462    1  462  462    0 #>  [463,]  463    1  463  463    0 #>  [464,]  464    1  464  464    0 #>  [465,]  465    1  465  465    0 #>  [466,]  466    1  466  466    0 #>  [467,]  467    1  467  467    0 #>  [468,]  468    1  468  468    0 #>  [469,]  469    1  469  469    0 #>  [470,]  470    1  470  470    0 #>  [471,]  471    1  471  471    0 #>  [472,]  472    1  472  472    0 #>  [473,]  473    1  473  473    0 #>  [474,]  474    1  474  474    0 #>  [475,]  475    1  475  475    0 #>  [476,]  476    1  476  476    0 #>  [477,]  477    1  477  477    0 #>  [478,]  478    1  478  478    0 #>  [479,]  479    1  479  479    0 #>  [480,]  480    1  480  480    0 #>  [481,]  481    1  481  481    0 #>  [482,]  482    1  482  482    0 #>  [483,]  483    1  483  483    0 #>  [484,]  484    1  484  484    0 #>  [485,]  485    1  485  485    0 #>  [486,]  486    1  486  486    0 #>  [487,]  487    1  487  487    0 #>  [488,]  488    1  488  488    0 #>  [489,]  489    1  489  489    0 #>  [490,]  490    1  490  490    0 #>  [491,]  491    1  491  491    0 #>  [492,]  492    1  492  492    0 #>  [493,]  493    1  493  493    0 #>  [494,]  494    1  494  494    0 #>  [495,]  495    1  495  495    0 #>  [496,]  496    1  496  496    0 #>  [497,]  497    1  497  497    0 #>  [498,]  498    1  498  498    0 #>  [499,]  499    1  499  499    0 #>  [500,]  500    1  500  500    0 #>  [501,]  501    1  501  501    0 #>  [502,]  502    1  502  502    0 #>  [503,]  503    1  503  503    0 #>  [504,]  504    1  504  504    0 #>  [505,]  505    1  505  505    0 #>  [506,]  506    1  506  506    0 #>  [507,]  507    1  507  507    0 #>  [508,]  508    1  508  508    0 #>  [509,]  509    1  509  509    0 #>  [510,]  510    1  510  510    0 #>  [511,]  511    1  511  511    0 #>  [512,]  512    1  512  512    0 #>  [513,]  513    1  513  513    0 #>  [514,]  514    1  514  514    0 #>  [515,]  515    1  515  515    0 #>  [516,]  516    1  516  516    0 #>  [517,]  517    1  517  517    0 #>  [518,]  518    1  518  518    0 #>  [519,]  519    1  519  519    0 #>  [520,]  520    1  520  520    0 #>  [521,]  521    1  521  521    0 #>  [522,]  522    1  522  522    0 #>  [523,]  523    1  523  523    0 #>  [524,]  524    1  524  524    0 #>  [525,]  525    1  525  525    0 #>  [526,]  526    1  526  526    0 #>  [527,]  527    1  527  527    0 #>  [528,]  528    1  528  528    0 #>  [529,]  529    1  529  529    0 #>  [530,]  530    1  530  530    0 #>  [531,]  531    1  531  531    0 #>  [532,]  532    1  532  532    0 #>  [533,]  533    1  533  533    0 #>  [534,]  534    1  534  534    0 #>  [535,]  535    1  535  535    0 #>  [536,]  536    1  536  536    0 #>  [537,]  537    1  537  537    0 #>  [538,]  538    1  538  538    0 #>  [539,]  539    1  539  539    0 #>  [540,]  540    1  540  540    0 #>  [541,]  541    1  541  541    0 #>  [542,]  542    1  542  542    0 #>  [543,]  543    1  543  543    0 #>  [544,]  544    1  544  544    0 #>  [545,]  545    1  545  545    0 #>  [546,]  546    1  546  546    0 #>  [547,]  547    1  547  547    0 #>  [548,]  548    1  548  548    0 #>  [549,]  549    1  549  549    0 #>  [550,]  550    1  550  550    0 #>  [551,]  551    1  551  551    0 #>  [552,]  552    1  552  552    0 #>  [553,]  553    1  553  553    0 #>  [554,]  554    1  554  554    0 #>  [555,]  555    1  555  555    0 #>  [556,]  556    1  556  556    0 #>  [557,]  557    1  557  557    0 #>  [558,]  558    1  558  558    0 #>  [559,]  559    1  559  559    0 #>  [560,]  560    1  560  560    0 #>  [561,]  561    1  561  561    0 #>  [562,]  562    1  562  562    0 #>  [563,]  563    1  563  563    0 #>  [564,]  564    1  564  564    0 #>  [565,]  565    1  565  565    0 #>  [566,]  566    1  566  566    0 #>  [567,]  567    1  567  567    0 #>  [568,]  568    1  568  568    0 #>  [569,]  569    1  569  569    0 #>  [570,]  570    1  570  570    0 #>  [571,]  571    1  571  571    0 #>  [572,]  572    1  572  572    0 #>  [573,]  573    1  573  573    0 #>  [574,]  574    1  574  574    0 #>  [575,]  575    1  575  575    0 #>  [576,]  576    1  576  576    0 #>  [577,]  577    1  577  577    0 #>  [578,]  578    1  578  578    0 #>  [579,]  579    1  579  579    0 #>  [580,]  580    1  580  580    0 #>  [581,]  581    1  581  581    0 #>  [582,]  582    1  582  582    0 #>  [583,]  583    1  583  583    0 #>  [584,]  584    1  584  584    0 #>  [585,]  585    1  585  585    0 #>  [586,]  586    1  586  586    0 #>  [587,]  587    1  587  587    0 #>  [588,]  588    1  588  588    0 #>  [589,]  589    1  589  589    0 #>  [590,]  590    1  590  590    0 #>  [591,]  591    1  591  591    0 #>  [592,]  592    1  592  592    0 #>  [593,]  593    1  593  593    0 #>  [594,]  594    1  594  594    0 #>  [595,]  595    1  595  595    0 #>  [596,]  596    1  596  596    0 #>  [597,]  597    1  597  597    0 #>  [598,]  598    1  598  598    0 #>  [599,]  599    1  599  599    0 #>  [600,]  600    1  600  600    0 #>  [601,]  601    1  601  601    0 #>  [602,]  602    1  602  602    0 #>  [603,]  603    1  603  603    0 #>  [604,]  604    1  604  604    0 #>  [605,]  605    1  605  605    0 #>  [606,]  606    1  606  606    0 #>  [607,]  607    1  607  607    0 #>  [608,]  608    1  608  608    0 #>  [609,]  609    1  609  609    0 #>  [610,]  610    1  610  610    0 #>  [611,]  611    1  611  611    0 #>  [612,]  612    1  612  612    0 #>  [613,]  613    1  613  613    0 #>  [614,]  614    1  614  614    0 #>  [615,]  615    1  615  615    0 #>  [616,]  616    1  616  616    0 #>  [617,]  617    1  617  617    0 #>  [618,]  618    1  618  618    0 #>  [619,]  619    1  619  619    0 #>  [620,]  620    1  620  620    0 #>  [621,]  621    1  621  621    0 #>  [622,]  622    1  622  622    0 #>  [623,]  623    1  623  623    0 #>  [624,]  624    1  624  624    0 #>  [625,]  625    1  625  625    0 #>  [626,]  626    1  626  626    0 #>  [627,]  627    1  627  627    0 #>  [628,]  628    1  628  628    0 #>  [629,]  629    1  629  629    0 #>  [630,]  630    1  630  630    0 #>  [631,]  631    1  631  631    0 #>  [632,]  632    1  632  632    0 #>  [633,]  633    1  633  633    0 #>  [634,]  634    1  634  634    0 #>  [635,]  635    1  635  635    0 #>  [636,]  636    1  636  636    0 #>  [637,]  637    1  637  637    0 #>  [638,]  638    1  638  638    0 #>  [639,]  639    1  639  639    0 #>  [640,]  640    1  640  640    0 #>  [641,]  641    1  641  641    0 #>  [642,]  642    1  642  642    0 #>  [643,]  643    1  643  643    0 #>  [644,]  644    1  644  644    0 #>  [645,]  645    1  645  645    0 #>  [646,]  646    1  646  646    0 #>  [647,]  647    1  647  647    0 #>  [648,]  648    1  648  648    0 #>  [649,]  649    1  649  649    0 #>  [650,]  650    1  650  650    0 #>  [651,]  651    1  651  651    0 #>  [652,]  652    1  652  652    0 #>  [653,]  653    1  653  653    0 #>  [654,]  654    1  654  654    0 #>  [655,]  655    1  655  655    0 #>  [656,]  656    1  656  656    0 #>  [657,]  657    1  657  657    0 #>  [658,]  658    1  658  658    0 #>  [659,]  659    1  659  659    0 #>  [660,]  660    1  660  660    0 #>  [661,]  661    1  661  661    0 #>  [662,]  662    1  662  662    0 #>  [663,]  663    1  663  663    0 #>  [664,]  664    1  664  664    0 #>  [665,]  665    1  665  665    0 #>  [666,]  666    1  666  666    0 #>  [667,]  667    1  667  667    0 #>  [668,]  668    1  668  668    0 #>  [669,]  669    1  669  669    0 #>  [670,]  670    1  670  670    0 #>  [671,]  671    1  671  671    0 #>  [672,]  672    1  672  672    0 #>  [673,]  673    1  673  673    0 #>  [674,]  674    1  674  674    0 #>  [675,]  675    1  675  675    0 #>  [676,]  676    1  676  676    0 #>  [677,]  677    1  677  677    0 #>  [678,]  678    1  678  678    0 #>  [679,]  679    1  679  679    0 #>  [680,]  680    1  680  680    0 #>  [681,]  681    1  681  681    0 #>  [682,]  682    1  682  682    0 #>  [683,]  683    1  683  683    0 #>  [684,]  684    1  684  684    0 #>  [685,]  685    1  685  685    0 #>  [686,]  686    1  686  686    0 #>  [687,]  687    1  687  687    0 #>  [688,]  688    1  688  688    0 #>  [689,]  689    1  689  689    0 #>  [690,]  690    1  690  690    0 #>  [691,]  691    1  691  691    0 #>  [692,]  692    1  692  692    0 #>  [693,]  693    1  693  693    0 #>  [694,]  694    1  694  694    0 #>  [695,]  695    1  695  695    0 #>  [696,]  696    1  696  696    0 #>  [697,]  697    1  697  697    0 #>  [698,]  698    1  698  698    0 #>  [699,]  699    1  699  699    0 #>  [700,]  700    1  700  700    0 #>  [701,]  701    1  701  701    0 #>  [702,]  702    1  702  702    0 #>  [703,]  703    1  703  703    0 #>  [704,]  704    1  704  704    0 #>  [705,]  705    1  705  705    0 #>  [706,]  706    1  706  706    0 #>  [707,]  707    1  707  707    0 #>  [708,]  708    1  708  708    0 #>  [709,]  709    1  709  709    0 #>  [710,]  710    1  710  710    0 #>  [711,]  711    1  711  711    0 #>  [712,]  712    1  712  712    0 #>  [713,]  713    1  713  713    0 #>  [714,]  714    1  714  714    0 #>  [715,]  715    1  715  715    0 #>  [716,]  716    1  716  716    0 #>  [717,]  717    1  717  717    0 #>  [718,]  718    1  718  718    0 #>  [719,]  719    1  719  719    0 #>  [720,]  720    1  720  720    0 #>  [721,]  721    1  721  721    0 #>  [722,]  722    1  722  722    0 #>  [723,]  723    1  723  723    0 #>  [724,]  724    1  724  724    0 #>  [725,]  725    1  725  725    0 #>  [726,]  726    1  726  726    0 #>  [727,]  727    1  727  727    0 #>  [728,]  728    1  728  728    0 #>  [729,]  729    1  729  729    0 #>  [730,]  730    1  730  730    0 #>  [731,]  731    1  731  731    0 #>  [732,]  732    1  732  732    0 #>  [733,]  733    1  733  733    0 #>  [734,]  734    1  734  734    0 #>  [735,]  735    1  735  735    0 #>  [736,]  736    1  736  736    0 #>  [737,]  737    1  737  737    0 #>  [738,]  738    1  738  738    0 #>  [739,]  739    1  739  739    0 #>  [740,]  740    1  740  740    0 #>  [741,]  741    1  741  741    0 #>  [742,]  742    1  742  742    0 #>  [743,]  743    1  743  743    0 #>  [744,]  744    1  744  744    0 #>  [745,]  745    1  745  745    0 #>  [746,]  746    1  746  746    0 #>  [747,]  747    1  747  747    0 #>  [748,]  748    1  748  748    0 #>  [749,]  749    1  749  749    0 #>  [750,]  750    1  750  750    0 #>  [751,]  751    1  751  751    0 #>  [752,]  752    1  752  752    0 #>  [753,]  753    1  753  753    0 #>  [754,]  754    1  754  754    0 #>  [755,]  755    1  755  755    0 #>  [756,]  756    1  756  756    0 #>  [757,]  757    1  757  757    0 #>  [758,]  758    1  758  758    0 #>  [759,]  759    1  759  759    0 #>  [760,]  760    1  760  760    0 #>  [761,]  761    1  761  761    0 #>  [762,]  762    1  762  762    0 #>  [763,]  763    1  763  763    0 #>  [764,]  764    1  764  764    0 #>  [765,]  765    1  765  765    0 #>  [766,]  766    1  766  766    0 #>  [767,]  767    1  767  767    0 #>  [768,]  768    1  768  768    0 #>  [769,]  769    1  769  769    0 #>  [770,]  770    1  770  770    0 #>  [771,]  771    1  771  771    0 #>  [772,]  772    1  772  772    0 #>  [773,]  773    1  773  773    0 #>  [774,]  774    1  774  774    0 #>  [775,]  775    1  775  775    0 #>  [776,]  776    1  776  776    0 #>  [777,]  777    1  777  777    0 #>  [778,]  778    1  778  778    0 #>  [779,]  779    1  779  779    0 #>  [780,]  780    1  780  780    0 #>  [781,]  781    1  781  781    0 #>  [782,]  782    1  782  782    0 #>  [783,]  783    1  783  783    0 #>  [784,]  784    1  784  784    0 #>  [785,]  785    1  785  785    0 #>  [786,]  786    1  786  786    0 #>  [787,]  787    1  787  787    0 #>  [788,]  788    1  788  788    0 #>  [789,]  789    1  789  789    0 #>  [790,]  790    1  790  790    0 #>  [791,]  791    1  791  791    0 #>  [792,]  792    1  792  792    0 #>  [793,]  793    1  793  793    0 #>  [794,]  794    1  794  794    0 #>  [795,]  795    1  795  795    0 #>  [796,]  796    1  796  796    0 #>  [797,]  797    1  797  797    0 #>  [798,]  798    1  798  798    0 #>  [799,]  799    1  799  799    0 #>  [800,]  800    1  800  800    0 #>  [801,]  801    1  801  801    0 #>  [802,]  802    1  802  802    0 #>  [803,]  803    1  803  803    0 #>  [804,]  804    1  804  804    0 #>  [805,]  805    1  805  805    0 #>  [806,]  806    1  806  806    0 #>  [807,]  807    1  807  807    0 #>  [808,]  808    1  808  808    0 #>  [809,]  809    1  809  809    0 #>  [810,]  810    1  810  810    0 #>  [811,]  811    1  811  811    0 #>  [812,]  812    1  812  812    0 #>  [813,]  813    1  813  813    0 #>  [814,]  814    1  814  814    0 #>  [815,]  815    1  815  815    0 #>  [816,]  816    1  816  816    0 #>  [817,]  817    1  817  817    0 #>  [818,]  818    1  818  818    0 #>  [819,]  819    1  819  819    0 #>  [820,]  820    1  820  820    0 #>  [821,]  821    1  821  821    0 #>  [822,]  822    1  822  822    0 #>  [823,]  823    1  823  823    0 #>  [824,]  824    1  824  824    0 #>  [825,]  825    1  825  825    0 #>  [826,]  826    1  826  826    0 #>  [827,]  827    1  827  827    0 #>  [828,]  828    1  828  828    0 #>  [829,]  829    1  829  829    0 #>  [830,]  830    1  830  830    0 #>  [831,]  831    1  831  831    0 #>  [832,]  832    1  832  832    0 #>  [833,]  833    1  833  833    0 #>  [834,]  834    1  834  834    0 #>  [835,]  835    1  835  835    0 #>  [836,]  836    1  836  836    0 #>  [837,]  837    1  837  837    0 #>  [838,]  838    1  838  838    0 #>  [839,]  839    1  839  839    0 #>  [840,]  840    1  840  840    0 #>  [841,]  841    1  841  841    0 #>  [842,]  842    1  842  842    0 #>  [843,]  843    1  843  843    0 #>  [844,]  844    1  844  844    0 #>  [845,]  845    1  845  845    0 #>  [846,]  846    1  846  846    0 #>  [847,]  847    1  847  847    0 #>  [848,]  848    1  848  848    0 #>  [849,]  849    1  849  849    0 #>  [850,]  850    1  850  850    0 #>  [851,]  851    1  851  851    0 #>  [852,]  852    1  852  852    0 #>  [853,]  853    1  853  853    0 #>  [854,]  854    1  854  854    0 #>  [855,]  855    1  855  855    0 #>  [856,]  856    1  856  856    0 #>  [857,]  857    1  857  857    0 #>  [858,]  858    1  858  858    0 #>  [859,]  859    1  859  859    0 #>  [860,]  860    1  860  860    0 #>  [861,]  861    1  861  861    0 #>  [862,]  862    1  862  862    0 #>  [863,]  863    1  863  863    0 #>  [864,]  864    1  864  864    0 #>  [865,]  865    1  865  865    0 #>  [866,]  866    1  866  866    0 #>  [867,]  867    1  867  867    0 #>  [868,]  868    1  868  868    0 #>  [869,]  869    1  869  869    0 #>  [870,]  870    1  870  870    0 #>  [871,]  871    1  871  871    0 #>  [872,]  872    1  872  872    0 #>  [873,]  873    1  873  873    0 #>  [874,]  874    1  874  874    0 #>  [875,]  875    1  875  875    0 #>  [876,]  876    1  876  876    0 #>  [877,]  877    1  877  877    0 #>  [878,]  878    1  878  878    0 #>  [879,]  879    1  879  879    0 #>  [880,]  880    1  880  880    0 #>  [881,]  881    1  881  881    0 #>  [882,]  882    1  882  882    0 #>  [883,]  883    1  883  883    0 #>  [884,]  884    1  884  884    0 #>  [885,]  885    1  885  885    0 #>  [886,]  886    1  886  886    0 #>  [887,]  887    1  887  887    0 #>  [888,]  888    1  888  888    0 #>  [889,]  889    1  889  889    0 #>  [890,]  890    1  890  890    0 #>  [891,]  891    1  891  891    0 #>  [892,]  892    1  892  892    0 #>  [893,]  893    1  893  893    0 #>  [894,]  894    1  894  894    0 #>  [895,]  895    1  895  895    0 #>  [896,]  896    1  896  896    0 #>  [897,]  897    1  897  897    0 #>  [898,]  898    1  898  898    0 #>  [899,]  899    1  899  899    0 #>  [900,]  900    1  900  900    0 #>  [901,]  901    1  901  901    0 #>  [902,]  902    1  902  902    0 #>  [903,]  903    1  903  903    0 #>  [904,]  904    1  904  904    0 #>  [905,]  905    1  905  905    0 #>  [906,]  906    1  906  906    0 #>  [907,]  907    1  907  907    0 #>  [908,]  908    1  908  908    0 #>  [909,]  909    1  909  909    0 #>  [910,]  910    1  910  910    0 #>  [911,]  911    1  911  911    0 #>  [912,]  912    1  912  912    0 #>  [913,]  913    1  913  913    0 #>  [914,]  914    1  914  914    0 #>  [915,]  915    1  915  915    0 #>  [916,]  916    1  916  916    0 #>  [917,]  917    1  917  917    0 #>  [918,]  918    1  918  918    0 #>  [919,]  919    1  919  919    0 #>  [920,]  920    1  920  920    0 #>  [921,]  921    1  921  921    0 #>  [922,]  922    1  922  922    0 #>  [923,]  923    1  923  923    0 #>  [924,]  924    1  924  924    0 #>  [925,]  925    1  925  925    0 #>  [926,]  926    1  926  926    0 #>  [927,]  927    1  927  927    0 #>  [928,]  928    1  928  928    0 #>  [929,]  929    1  929  929    0 #>  [930,]  930    1  930  930    0 #>  [931,]  931    1  931  931    0 #>  [932,]  932    1  932  932    0 #>  [933,]  933    1  933  933    0 #>  [934,]  934    1  934  934    0 #>  [935,]  935    1  935  935    0 #>  [936,]  936    1  936  936    0 #>  [937,]  937    1  937  937    0 #>  [938,]  938    1  938  938    0 #>  [939,]  939    1  939  939    0 #>  [940,]  940    1  940  940    0 #>  [941,]  941    1  941  941    0 #>  [942,]  942    1  942  942    0 #>  [943,]  943    1  943  943    0 #>  [944,]  944    1  944  944    0 #>  [945,]  945    1  945  945    0 #>  [946,]  946    1  946  946    0 #>  [947,]  947    1  947  947    0 #>  [948,]  948    1  948  948    0 #>  [949,]  949    1  949  949    0 #>  [950,]  950    1  950  950    0 #>  [951,]  951    1  951  951    0 #>  [952,]  952    1  952  952    0 #>  [953,]  953    1  953  953    0 #>  [954,]  954    1  954  954    0 #>  [955,]  955    1  955  955    0 #>  [956,]  956    1  956  956    0 #>  [957,]  957    1  957  957    0 #>  [958,]  958    1  958  958    0 #>  [959,]  959    1  959  959    0 #>  [960,]  960    1  960  960    0 #>  [961,]  961    1  961  961    0 #>  [962,]  962    1  962  962    0 #>  [963,]  963    1  963  963    0 #>  [964,]  964    1  964  964    0 #>  [965,]  965    1  965  965    0 #>  [966,]  966    1  966  966    0 #>  [967,]  967    1  967  967    0 #>  [968,]  968    1  968  968    0 #>  [969,]  969    1  969  969    0 #>  [970,]  970    1  970  970    0 #>  [971,]  971    1  971  971    0 #>  [972,]  972    1  972  972    0 #>  [973,]  973    1  973  973    0 #>  [974,]  974    1  974  974    0 #>  [975,]  975    1  975  975    0 #>  [976,]  976    1  976  976    0 #>  [977,]  977    1  977  977    0 #>  [978,]  978    1  978  978    0 #>  [979,]  979    1  979  979    0 #>  [980,]  980    1  980  980    0 #>  [981,]  981    1  981  981    0 #>  [982,]  982    1  982  982    0 #>  [983,]  983    1  983  983    0 #>  [984,]  984    1  984  984    0 #>  [985,]  985    1  985  985    0 #>  [986,]  986    1  986  986    0 #>  [987,]  987    1  987  987    0 #>  [988,]  988    1  988  988    0 #>  [989,]  989    1  989  989    0 #>  [990,]  990    1  990  990    0 #>  [991,]  991    1  991  991    0 #>  [992,]  992    1  992  992    0 #>  [993,]  993    1  993  993    0 #>  [994,]  994    1  994  994    0 #>  [995,]  995    1  995  995    0 #>  [996,]  996    1  996  996    0 #>  [997,]  997    1  997  997    0 #>  [998,]  998    1  998  998    0 #>  [999,]  999    1  999  999    0 #> [1000,] 1000    1 1000 1000    0  terra::ymax(dummy_spatvector) #> [1] 1000  terra::xmax(dummy_spatvector) #> [1] 1000  # dbSpatial dbSpatial::ST_YMax(db_points) #> [1] 1000  dbSpatial::ST_XMax(db_points) #> [1] 1000"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"centroids","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"centroids","title":"Spatial Operations","text":"","code":"# # terra # terra::geom(dummy_spatvector) #  # terra::centroids(dummy_spatvector)"},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward C. Ruiz. Author, maintainer. Jiaji George Chen. Author. Ruben Dries. Author, reviewer.","code":""},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"C. Ruiz E, George Chen J, Dries R (2024). dbSpatial: Wrappers DuckDB Spatial Extension. R package version 0.0.0.9004, https://drieslab.github.io/dbSpatial/.","code":"@Manual{,   title = {dbSpatial: Wrappers for DuckDB Spatial Extension},   author = {Edward {C. Ruiz} and Jiaji {George Chen} and Ruben Dries},   year = {2024},   note = {R package version 0.0.0.9004},   url = {https://drieslab.github.io/dbSpatial/}, }"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"dbspatial","dir":"","previous_headings":"","what":"Wrappers for DuckDB Spatial Extension","title":"Wrappers for DuckDB Spatial Extension","text":"goal dbSpatial provide larger--memory spatial operations various spatial data sources. package largely relies DuckDB spatial extension.","code":""},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrappers for DuckDB Spatial Extension","text":"can install development version dbSpatial Github like :","code":"# install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"drieslab/dbSpatial\")"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Wrappers for DuckDB Spatial Extension","text":"DuckDB spatial extension can used wrapper functions package directly (ST_*()), dplyr verbs containing ST_*() functions, SQL queries DuckDB database connection containing ST_*() functions.","code":"library(dbSpatial)  # create duckdb db in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  points <- dbSpatial(conn = duckdb_conn,                     name = \"test_points\",                     value = test_data,                     x_colName = \"x\",                     y_colName = \"y\",                     overwrite = TRUE)  points #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [user@Linux 6.5.0-25-generic:R 4.1.2/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extent of a geometry — ST_Extent","title":"Get extent of a geometry — ST_Extent","text":"Get extent geometry","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extent of a geometry — ST_Extent","text":"","code":"ST_Extent(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extent of a geometry — ST_Extent","text":"tbl name table duckdb database containing geometry column geomName name column containing geometry value tbl","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extent of a geometry — ST_Extent","text":"data.frame extent geom column tbl","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get extent of a geometry — ST_Extent","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        # Get extent of the table ST_Extent(db_points) #>   min_x max_x min_y max_y #> 1   100   300   500   700"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":null,"dir":"Reference","previous_headings":"","what":"Return geometry type — ST_GeometryType","title":"Return geometry type — ST_GeometryType","text":"function returns geometry type specified geometry column specified table.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return geometry type — ST_GeometryType","text":"","code":"ST_GeometryType(tbl, geomName = \"geom\", limit = 10)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return geometry type — ST_GeometryType","text":"tbl name table duckdb database geomName name column containing geometry value tbl. default = \"geom\". limit number rows return. default = 10.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return geometry type — ST_GeometryType","text":"tbl_dbi","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return geometry type — ST_GeometryType","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_GeometryType(tbl = db_points) #>   geom_type #> 1     POINT #> 2     POINT #> 3     POINT"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometry is valid — ST_IsValid","title":"Determine if geometry is valid — ST_IsValid","text":"Determine geometry valid","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometry is valid — ST_IsValid","text":"","code":"ST_IsValid(tbl)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometry is valid — ST_IsValid","text":"tbl name table duckdb database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometry is valid — ST_IsValid","text":"boolean vector whether geometry tbl valid","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometry is valid — ST_IsValid","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # Create a duckdb connection duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)                        # Get extent of the table ST_IsValid(db_points) #> [1] TRUE TRUE TRUE"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read spatial data from a file and create a table in a duckdb database — ST_Read","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"Read spatial data file create table duckdb database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"","code":"ST_Read(conn, name, value, overwrite = FALSE, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"conn duckdb connection name name table created value data.frame file path overwrite logical; TRUE, overwrite table already exists ... additional arguments pass ST_Read","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"tbl_dbi","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"list files supported see documentation . https://DuckDB.org/docs/extensions/spatial.html#st_read---read-spatial-value--files","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  value = system.file(\"data\", \"dummy_points.shp\", package = \"dbSpatial\")  points <- ST_Read(conn = con, name = \"points\", value = value, overwrite = TRUE) #> Error in .check_value(value): Invalid \"value\" input passed.  points #> function (x, ...)  #> UseMethod(\"points\") #> <bytecode: 0x56e4ff198c20> #> <environment: namespace:graphics>"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate x, y coordinates by delta x, delta y — ST_Translate","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"Translate x, y coordinates delta x, delta y","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"","code":"ST_Translate(tbl, geomName = \"geom\", dx, dy)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"tbl name table duckdb database geomName name column containing geometry value tbl. default = \"geom\". dx delta x dy delta y","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"duckdb table translated geometries","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  value = system.file(\"data\", \"dummy_points.shp\", package = \"dbSpatial\")  points <- ST_Read(conn = con, name = \"points\", value = value, overwrite = TRUE) #> Error in .check_value(value): Invalid \"value\" input passed.  points |>    dplyr::mutate(geom_text = ST_AsText(geom)) #> Error in UseMethod(\"mutate\"): no applicable method for 'mutate' applied to an object of class \"function\"  points_translated <- ST_Translate(tbl = points, dx = 100, dy = -20) #> Error in .check_tbl(tbl = tbl): Please provide a duckdb table  points_translated |>    dplyr::mutate(geom_text = ST_AsText(geom)) #> Error in eval(expr, envir, enclos): object 'points_translated' not found"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum x coordinate — ST_XMax","title":"Get maximum x coordinate — ST_XMax","text":"Get maximum x coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum x coordinate — ST_XMax","text":"","code":"ST_XMax(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum x coordinate — ST_XMax","text":"tbl name table duckdb database geomName name column containing geometry value tbl default = \"geom\".","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum x coordinate — ST_XMax","text":"maximum x coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum x coordinate — ST_XMax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_XMax(tbl = db_points) #> [1] 300"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum y coordinate — ST_YMax","title":"Get maximum y coordinate — ST_YMax","text":"Get maximum y coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum y coordinate — ST_YMax","text":"","code":"ST_YMax(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum y coordinate — ST_YMax","text":"tbl name table duckdb database geomName name column containing geometry value tbl default = \"geom\".","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum y coordinate — ST_YMax","text":"maximum y coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum y coordinate — ST_YMax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_YMax(tbl = db_points) #> [1] 700"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dbSpatial object with geometry value. — dbSpatial","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"function reads variety input value types containing spatial value creates dbSpatial object contains geometry value type. x_colName y_colName specified, point geometry constructed.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"","code":"dbSpatial(conn, name, value, x_colName, y_colName, overwrite = FALSE, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"conn Connection DuckDB database. duckdb_connection. name Name table set database. Character. value value added database. Can data.frame, tbl, file path, terra object. See details information. x_colName Name column containing X coordinates. Numeric. y_colName Name column containing Y coordinates. Numeric. overwrite Overwrite existing table (default = FALSE). ... Additional arguments passed","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"dbSpatial object geometry value.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"list files supported see ST_Read. TODO: Support existing 'geom' column DT DF. e.g. SDF, sf, terra.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"","code":"# create in-memory DuckDB db duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test value test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # read data.frame and create point geometry dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = test_data,           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>  # read csv dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = 'test_data.csv',           overwrite = TRUE) #> # Source:   table<test_points> [10 x 3] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    x     y     id    #>    <chr> <chr> <chr> #>  1 1     1     1     #>  2 2     2     2     #>  3 3     3     3     #>  4 4     4     4     #>  5 5     5     5     #>  6 6     6     6     #>  7 7     7     7     #>  8 8     8     8     #>  9 9     9     9     #> 10 10    10    10"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate basic dbSpatial object — .sim_dbSpatial","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"Simulate basic dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"","code":".sim_dbSpatial()"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Install and/or load DuckDB spatial extension — loadSpatial","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"Install /load DuckDB spatial extension","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"loadSpatial(conn)"},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"conn duckdb connection","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\") loadSpatial(conn = duckdb_conn) #> DuckDB spatial extension installed and loaded"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9004 (2024-03-18)","text":"Update README DESCRIPTION.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update constructor function. Update ST_ functions use new constructor.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update vignettes class diagram new constructor. Add working examples ST functions.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Update class diagram. Add tictoc imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"uncategorized-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Merge branch ‘main’ https://github.com/Ed2uiz/dbSpatial.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"bug-fixes-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add missing ’ constructor. Duckdb spatial extension load error GHA workflow.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add terra imports. Add dbplyr imports. Add dplyr imports. Add duckdb imports. Add duckdbfs imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Update docs. Update pkg info. Move index.html /docs. Add license","code":""}]
