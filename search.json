[{"path":"https://drieslab.github.io/dbSpatial/articles/class_structure.html","id":"class-structure","dir":"Articles","previous_headings":"","what":"Class Structure","title":"Class Structure","text":"dbSpatial package contains convenience functions working diverse spatial data sources file formats DuckDB spatial extension. information DuckDB spatial extension see DuckDB spatial extension. information loading multiple geospatial files DuckDB, see DuckDBfs package.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"vignette demonstrates use dbSpatial package create DuckDB database spatial points polygons starting various data sources.","code":""},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"creating-a-duckdb-connection","dir":"Articles","previous_headings":"","what":"Creating a DuckDB connection","title":"Getting Started","text":"","code":"# create db connection in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-data-frames","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From data.frames","title":"Getting Started","text":"","code":"library(DBI)  # test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # df, tbl # specify x and y column names to cast to a point geometry dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = test_data,           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from--csv-file","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From .csv file","title":"Getting Started","text":"","code":"# test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  # write to file write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # load file in db dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = 'test_data.csv',           overwrite = TRUE) #> # Source:   table<test_points> [10 x 3] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    x     y     id    #>    <chr> <chr> <chr> #>  1 1     1     1     #>  2 2     2     2     #>  3 3     3     3     #>  4 4     4     4     #>  5 5     5     5     #>  6 6     6     6     #>  7 7     7     7     #>  8 8     8     8     #>  9 9     9     9     #> 10 10    10    10"},{"path":"https://drieslab.github.io/dbSpatial/articles/getting_started.html","id":"from-terra-objects-spatvector","dir":"Articles","previous_headings":"Reading in spatial data from various sources","what":"From {terra} objects: SpatVector","title":"Getting Started","text":"","code":"# load terra package library(terra) #> terra 1.7.71  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(test_data, geom = c(\"x\", \"y\"))  # Load SpatVector in db dbSpatial(conn = duckdb_conn,           name = \"spatVector_proxy\",           value = dummy_spatvector,           overwrite = TRUE) #> # Source:   table<spatVector_proxy> [10 x 2] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>       id geom       #>    <dbl> <list>     #>  1     1 <raw [32]> #>  2     2 <raw [32]> #>  3     3 <raw [32]> #>  4     4 <raw [32]> #>  5     5 <raw [32]> #>  6     6 <raw [32]> #>  7     7 <raw [32]> #>  8     8 <raw [32]> #>  9     9 <raw [32]> #> 10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"spatial-operations-with-terra-comparisons","dir":"Articles","previous_headings":"","what":"Spatial Operations with {terra} Comparisons","title":"Spatial Operations","text":"","code":"# load libs library(dbSpatial) library(terra) #> terra 1.7.71 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"create-test-data","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons","what":"Create test data","title":"Spatial Operations","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = 1:1e3, y = 1:1e3) attributes <- data.frame(id = 1:1e3, name = paste(\"A\", 1:1e3, sep = \"_\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # DuckDB duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)  # Preview points table db_points |>   dplyr::mutate(geom_text = ST_AsText(geom)) #> # Source:   SQL [?? x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>       id name  geom       geom_text     #>    <dbl> <chr> <list>     <chr>         #>  1     1 A_1   <raw [32]> POINT (1 1)   #>  2     2 A_2   <raw [32]> POINT (2 2)   #>  3     3 A_3   <raw [32]> POINT (3 3)   #>  4     4 A_4   <raw [32]> POINT (4 4)   #>  5     5 A_5   <raw [32]> POINT (5 5)   #>  6     6 A_6   <raw [32]> POINT (6 6)   #>  7     7 A_7   <raw [32]> POINT (7 7)   #>  8     8 A_8   <raw [32]> POINT (8 8)   #>  9     9 A_9   <raw [32]> POINT (9 9)   #> 10    10 A_10  <raw [32]> POINT (10 10) #> # ℹ more rows"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"extent","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Extent","title":"Spatial Operations","text":"","code":"# terra terra::ext(dummy_spatvector) #> SpatExtent : 1, 1000, 1, 1000 (xmin, xmax, ymin, ymax)  # dbSpatial dbSpatial::ST_Extent(tbl = db_points) #>   min_x max_x min_y max_y #> 1     1  1000     1  1000"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"shift","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Shift","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  shifted_spatVector = terra::shift(dummy_spatvector, dx = 10, dy = 10)  head(terra::geom(shifted_spatVector)) #>      geom part  x  y hole #> [1,]    1    1 11 11    0 #> [2,]    2    1 12 12    0 #> [3,]    3    1 13 13    0 #> [4,]    4    1 14 14    0 #> [5,]    5    1 15 15    0 #> [6,]    6    1 16 16    0  # dbSpatial dbSpatial::ST_Translate(tbl = db_points, dx = 10, dy = 10) |>   mutate(geom_text = ST_AsText(geom)) #> # Source:   SQL [?? x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>       id name  geom       geom_text     #>    <dbl> <chr> <list>     <chr>         #>  1     1 A_1   <raw [32]> POINT (11 11) #>  2     2 A_2   <raw [32]> POINT (12 12) #>  3     3 A_3   <raw [32]> POINT (13 13) #>  4     4 A_4   <raw [32]> POINT (14 14) #>  5     5 A_5   <raw [32]> POINT (15 15) #>  6     6 A_6   <raw [32]> POINT (16 16) #>  7     7 A_7   <raw [32]> POINT (17 17) #>  8     8 A_8   <raw [32]> POINT (18 18) #>  9     9 A_9   <raw [32]> POINT (19 19) #> 10    10 A_10  <raw [32]> POINT (20 20) #> # ℹ more rows"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"is-valid","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Is.Valid","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  head(terra::is.valid(dummy_spatvector)) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE  dbSpatial::ST_IsValid(tbl = db_points) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://drieslab.github.io/dbSpatial/articles/spatial_operations.html","id":"y-x-max","dir":"Articles","previous_headings":"Spatial Operations with {terra} Comparisons > Create test data","what":"Y, X Max","title":"Spatial Operations","text":"","code":"# terra head(terra::geom(dummy_spatvector)) #>      geom part x y hole #> [1,]    1    1 1 1    0 #> [2,]    2    1 2 2    0 #> [3,]    3    1 3 3    0 #> [4,]    4    1 4 4    0 #> [5,]    5    1 5 5    0 #> [6,]    6    1 6 6    0  terra::ymax(dummy_spatvector) #> [1] 1000  terra::xmax(dummy_spatvector) #> [1] 1000  # dbSpatial dbSpatial::ST_YMax(db_points) #> [1] 1000  dbSpatial::ST_XMax(db_points) #> [1] 1000"},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward C. Ruiz. Author, maintainer. Jiaji George Chen. Author. Ruben Dries. Author, reviewer.","code":""},{"path":"https://drieslab.github.io/dbSpatial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"C. Ruiz E, George Chen J, Dries R (2024). dbSpatial: Wrappers DuckDB Spatial Extension. R package version 0.0.0.9004, https://drieslab.github.io/dbSpatial/.","code":"@Manual{,   title = {dbSpatial: Wrappers for DuckDB Spatial Extension},   author = {Edward {C. Ruiz} and Jiaji {George Chen} and Ruben Dries},   year = {2024},   note = {R package version 0.0.0.9004},   url = {https://drieslab.github.io/dbSpatial/}, }"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"dbspatial","dir":"","previous_headings":"","what":"Wrappers for DuckDB Spatial Extension","title":"Wrappers for DuckDB Spatial Extension","text":"goal dbSpatial provide larger--memory spatial operations various spatial data sources. package largely relies DuckDB spatial extension.","code":""},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrappers for DuckDB Spatial Extension","text":"can install development version dbSpatial Github like :","code":"# install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"drieslab/dbSpatial\")"},{"path":"https://drieslab.github.io/dbSpatial/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Wrappers for DuckDB Spatial Extension","text":"DuckDB spatial extension can used wrapper functions package directly (ST_*()), dplyr verbs containing ST_*() functions, SQL queries DuckDB database connection containing ST_*() functions.","code":"library(dbSpatial)  # create duckdb db in memory duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test data test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  points <- dbSpatial(conn = duckdb_conn,                     name = \"test_points\",                     value = test_data,                     x_colName = \"x\",                     y_colName = \"y\",                     overwrite = TRUE)  points #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [user@Linux 6.5.0-25-generic:R 4.1.2/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extent of a geometry — ST_Extent","title":"Get extent of a geometry — ST_Extent","text":"Get extent geometry","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extent of a geometry — ST_Extent","text":"","code":"ST_Extent(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extent of a geometry — ST_Extent","text":"tbl name table duckdb database containing geometry column geomName name column containing geometry value tbl","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extent of a geometry — ST_Extent","text":"data.frame extent geom column tbl","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get extent of a geometry — ST_Extent","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        # Get extent of the table ST_Extent(db_points) #>   min_x max_x min_y max_y #> 1   100   300   500   700"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":null,"dir":"Reference","previous_headings":"","what":"Return geometry type — ST_GeometryType","title":"Return geometry type — ST_GeometryType","text":"function returns geometry type specified geometry column specified table.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return geometry type — ST_GeometryType","text":"","code":"ST_GeometryType(tbl, geomName = \"geom\", limit = 10)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return geometry type — ST_GeometryType","text":"tbl name table duckdb database geomName name column containing geometry value tbl. default = \"geom\". limit number rows return. default = 10.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return geometry type — ST_GeometryType","text":"tbl_dbi","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_GeometryType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return geometry type — ST_GeometryType","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_GeometryType(tbl = db_points) #>   geom_type #> 1     POINT #> 2     POINT #> 3     POINT"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if geometry is valid — ST_IsValid","title":"Determine if geometry is valid — ST_IsValid","text":"Determine geometry valid","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if geometry is valid — ST_IsValid","text":"","code":"ST_IsValid(tbl, limit = 10)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if geometry is valid — ST_IsValid","text":"tbl name table duckdb database limit maximum number invalid geometries return","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if geometry is valid — ST_IsValid","text":"boolean vector whether geometry tbl valid","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_IsValid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if geometry is valid — ST_IsValid","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a SpatVector from the data.frame dummy_spatvector <- terra::vect(dummy_data, geom = c(\"x\", \"y\"))  # Create a duckdb connection duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = duckdb_conn,                       name = \"spatVector_proxy\",                       value = dummy_spatvector,                       overwrite = TRUE)                        # Get extent of the table ST_IsValid(db_points) #> [1] TRUE TRUE TRUE"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read spatial data from a file and create a table in a duckdb database — ST_Read","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"Read spatial data file create table duckdb database","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"","code":"ST_Read(conn, name, value, overwrite = FALSE, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"conn duckdb connection name name table created value data.frame file path overwrite logical; TRUE, overwrite table already exists ... additional arguments pass ST_Read","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"tbl_dbi","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"list files supported see documentation . https://DuckDB.org/docs/extensions/spatial.html#st_read---read-spatial-value--files","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read spatial data from a file and create a table in a duckdb database — ST_Read","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  value = system.file(\"data\", \"dummy_points.shp\", package = \"dbSpatial\")  points <- ST_Read(conn = con, name = \"points\", value = value, overwrite = TRUE) #> Error in .check_value(value): Invalid \"value\" input passed.  points #> function (x, ...)  #> UseMethod(\"points\") #> <bytecode: 0x5e8e525464e0> #> <environment: namespace:graphics>"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate x, y coordinates by delta x, delta y — ST_Translate","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"Translate x, y coordinates delta x, delta y","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"","code":"ST_Translate(tbl, geomName = \"geom\", dx, dy)"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"tbl name table duckdb database geomName name column containing geometry value tbl. default = \"geom\". dx delta x dy delta y","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"duckdb table translated geometries","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_Translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate x, y coordinates by delta x, delta y — ST_Translate","text":"","code":"con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  value = system.file(\"data\", \"dummy_points.shp\", package = \"dbSpatial\")  points <- ST_Read(conn = con, name = \"points\", value = value, overwrite = TRUE) #> Error in .check_value(value): Invalid \"value\" input passed.  points |>    dplyr::mutate(geom_text = ST_AsText(geom)) #> Error in UseMethod(\"mutate\"): no applicable method for 'mutate' applied to an object of class \"function\"  points_translated <- ST_Translate(tbl = points, dx = 100, dy = -20) #> Error in .check_tbl(tbl = tbl): Please provide a duckdb table  points_translated |>    dplyr::mutate(geom_text = ST_AsText(geom)) #> Error in eval(expr, envir, enclos): object 'points_translated' not found"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum x coordinate — ST_XMax","title":"Get maximum x coordinate — ST_XMax","text":"Get maximum x coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum x coordinate — ST_XMax","text":"","code":"ST_XMax(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum x coordinate — ST_XMax","text":"tbl name table duckdb database geomName name column containing geometry value tbl default = \"geom\".","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum x coordinate — ST_XMax","text":"maximum x coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_XMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum x coordinate — ST_XMax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_XMax(tbl = db_points) #> [1] 300"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum y coordinate — ST_YMax","title":"Get maximum y coordinate — ST_YMax","text":"Get maximum y coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum y coordinate — ST_YMax","text":"","code":"ST_YMax(tbl, geomName = \"geom\")"},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum y coordinate — ST_YMax","text":"tbl name table duckdb database geomName name column containing geometry value tbl default = \"geom\".","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum y coordinate — ST_YMax","text":"maximum y coordinate","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/ST_YMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum y coordinate — ST_YMax","text":"","code":"# Create a data.frame with x and y coordinates and attributes coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700)) attributes <- data.frame(id = 1:3, name = c(\"A\", \"B\", \"C\"))  # Combine the coordinates and attributes dummy_data <- cbind(coordinates, attributes)  # Create a duckdb connection con = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Create a duckdb table with spatial points db_points = dbSpatial(conn = con,                       value = dummy_data,                       x_colName = \"x\",                       y_colName = \"y\",                       name = \"foo\",                       overwrite = TRUE)                        ST_YMax(tbl = db_points) #> [1] 700"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dbSpatial object with geometry value. — dbSpatial","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"function reads variety input value types containing spatial value creates dbSpatial object contains geometry value type. x_colName y_colName specified, point geometry constructed.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"","code":"dbSpatial(conn, name, value, x_colName, y_colName, overwrite = FALSE, ...)"},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"conn Connection DuckDB database. duckdb_connection. name Name table set database. Character. value value added database. Can data.frame, tbl, file path, terra object. See details information. x_colName Name column containing X coordinates. Numeric. y_colName Name column containing Y coordinates. Numeric. overwrite Overwrite existing table (default = FALSE). ... Additional arguments passed","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"dbSpatial object geometry value.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"list files supported see ST_Read. TODO: Support existing 'geom' column DT DF. e.g. SDF, sf, terra.","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dbSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dbSpatial object with geometry value. — dbSpatial","text":"","code":"# create in-memory DuckDB db duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # test value test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)  write.csv(test_data, \"test_data.csv\", row.names = FALSE)  # read data.frame and create point geometry dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = test_data,           x_colName = \"x\",           y_colName = \"y\",           overwrite = TRUE) #> # Source:   table<test_points> [10 x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>        x     y    id geom       #>    <int> <int> <int> <list>     #>  1     1     1     1 <raw [32]> #>  2     2     2     2 <raw [32]> #>  3     3     3     3 <raw [32]> #>  4     4     4     4 <raw [32]> #>  5     5     5     5 <raw [32]> #>  6     6     6     6 <raw [32]> #>  7     7     7     7 <raw [32]> #>  8     8     8     8 <raw [32]> #>  9     9     9     9 <raw [32]> #> 10    10    10    10 <raw [32]>  # read csv dbSpatial(conn = duckdb_conn,           name = \"test_points\",           value = 'test_data.csv',           overwrite = TRUE) #> # Source:   table<test_points> [10 x 3] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>    x     y     id    #>    <chr> <chr> <chr> #>  1 1     1     1     #>  2 2     2     2     #>  3 3     3     3     #>  4 4     4     4     #>  5 5     5     5     #>  6 6     6     6     #>  7 7     7     7     #>  8 8     8     8     #>  9 9     9     9     #> 10 10    10    10"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate basic dbSpatial object — .sim_dbSpatial","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"Simulate basic dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"","code":".sim_dbSpatial()"},{"path":"https://drieslab.github.io/dbSpatial/reference/dot-sim_dbSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate basic dbSpatial object — .sim_dbSpatial","text":"dbSpatial object","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Install and/or load DuckDB spatial extension — loadSpatial","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"Install /load DuckDB spatial extension","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"loadSpatial(conn)"},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"conn duckdb connection","code":""},{"path":"https://drieslab.github.io/dbSpatial/reference/loadSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install and/or load DuckDB spatial extension — loadSpatial","text":"","code":"duckdb_conn = DBI::dbConnect(duckdb::duckdb(), \":memory:\") loadSpatial(conn = duckdb_conn) #> DuckDB spatial extension installed and loaded"},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9004","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9004 (2024-03-18)","text":"Update README DESCRIPTION.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update constructor function. Update ST_ functions use new constructor.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9003 (2024-03-18)","text":"Update vignettes class diagram new constructor. Add working examples ST functions.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Update class diagram. Add tictoc imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"uncategorized-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"dbSpatial 0.0.0.9002 (2024-01-02)","text":"Merge branch ‘main’ https://github.com/Ed2uiz/dbSpatial.","code":""},{"path":[]},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"bug-fixes-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add missing ’ constructor. Duckdb spatial extension load error GHA workflow.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"features-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Features","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Add terra imports. Add dbplyr imports. Add dplyr imports. Add duckdb imports. Add duckdbfs imports.","code":""},{"path":"https://drieslab.github.io/dbSpatial/news/index.html","id":"chore-0-0-0-9001","dir":"Changelog","previous_headings":"","what":"Chore","title":"dbSpatial 0.0.0.9001 (2024-01-02)","text":"Update docs. Update pkg info. Move index.html /docs. Add license","code":""}]
