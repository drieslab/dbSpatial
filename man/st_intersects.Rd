% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_intersects.R
\name{st_intersects}
\alias{st_intersects}
\title{Intersect two dbSpatial objects}
\usage{
st_intersects(
  p1,
  p1_geom_colName = "geom",
  p1_cols_keep = NULL,
  p2,
  p2_geom_colName = "geom",
  p2_cols_keep = NULL,
  output_tblName = "intersect_geom"
)
}
\arguments{
\item{p1}{A \code{\link{dbSpatial}} object containing a \code{geometry} column in a database.}

\item{p1_geom_colName}{The \code{geometry} column name in p1. default: "geom"}

\item{p1_cols_keep}{The column names in p1 to keep after the intersection. default: all columns}

\item{p2}{A \code{\link{dbSpatial}} object containing a \code{geometry} column in a database.}

\item{p2_geom_colName}{The \code{geometry} column name in p2. default: "geom"}

\item{p2_cols_keep}{The column names in p2 to keep after the intersection. default: all columns}

\item{output_tblName}{The name of the table to store the intersected geom data. default: "intersect_geom"}
}
\value{
A \code{\link{dbSpatial}} object containing specified columns from
the geometry intersection.
}
\description{
This function intersects two \code{\link{dbSpatial}} objects with \code{geometry} columns in a database.
}
\details{
The \code{st_intersects()} function is used to intersect sets of \code{geometry} point
and/or polygon data between \code{\link{dbSpatial}} objects. \code{p1} and \code{p2}
\code{\link{dbSpatial}} objects must share the same database connection.

By default this function will overwrite an existing table with the same name.
}
\examples{
con = DBI::dbConnect(duckdb::duckdb(), ":memory:")

coordinates <- data.frame(x = c(100, 200, 300), y = c(500, 600, 700))
attributes <- data.frame(id = 1:3, name = c("A1", "B1", "C1"))

# Combine the coordinates and attributes
dummy_data <- cbind(coordinates, attributes)
 
points <- dbSpatial(conn = con,
                    name = "points", 
                    value = dummy_data, 
                    overwrite = TRUE, 
                    x_colName = "x", 
                    y_colName = "y")

# preview                     
points |> 
  dplyr::mutate(geom_text = ST_AsText(geom))
                    
# Create a second set of points, with B1 and C1 translated by + 100
dummy_data2 <- dummy_data
dummy_data2[c(2,3),c(1,2)] <- dummy_data2[c(2,3),c(1,2)] + 150
dummy_data2$name <- c('A2', 'B2', 'C2')

points2 <- dbSpatial(conn = con,
                    name = "points2", 
                    value = dummy_data2, 
                    overwrite = TRUE, 
                    x_colName = "x", 
                    y_colName = "y")
# preview                     
points2 |> 
  dplyr::mutate(geom_text = ST_AsText(geom))

points_intersect <- st_intersects(p1 = points, 
                                  p1_cols_keep = c("name"), 
                                  p2 = points2)

points_intersect
}
\keyword{geom_predicates}
