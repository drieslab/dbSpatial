% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R, R/dbSpatial.R
\name{dbSpatial}
\alias{dbSpatial}
\title{S4 dbSpatial class}
\usage{
dbSpatial(
  value,
  name,
  conn,
  x_colName = NULL,
  y_colName = NULL,
  geomName = "geom",
  overwrite = FALSE,
  ...
)

dbSpatial(
  value,
  name,
  conn,
  x_colName = NULL,
  y_colName = NULL,
  geomName = "geom",
  overwrite = FALSE,
  ...
)
}
\arguments{
\item{value}{value to be added to database. Can be a data.frame, tbl_duckdb_connection,
file path, \link{\code{sf}} object, or \link{\code{terra}} object.
See details for more information.}

\item{name}{\code{character}. Name of table to add to the database.}

\item{conn}{\link{\code{duckdb_connection}}. A connection object to a DuckDB database.}

\item{x_colName}{\code{character}. Name of column containing numerical X coordinates. default = NULL.}

\item{y_colName}{\code{character}. Name of column containing numerical Y coordinates. default = NULL.}

\item{geomName}{\code{character}. Name of the column containing the geometry. Must start with a character. default = "geom".}

\item{overwrite}{\code{logical}. Overwrite existing table. default = FALSE.}

\item{...}{Additional arguments to be passed}
}
\value{
A \code{dbSpatial} object with geometry
}
\description{
Representation of spatial geometries in a database. Each object
is used as a connection to a single table that exists within a DuckDB database.

Constructor function to ingest a variety of spatial data inputs and create
a \link{dbSpatial} object containing a \code{geometry} data type based
on the \href{https://en.wikipedia.org/wiki/Simple_Features}{Simple Features}
standard.

If \code{x_colName} and \code{y_colName} are specified, a point geometry
will be constructed based on these columns.
}
\details{
For list of files supported see \link{ST_Read}.

TODO: Support for SDF, sf.
}
\section{Slots}{

\describe{
\item{\code{conn}}{\link{\code{duckdb_connection}}. A connection object to a DuckDB database.}

\item{\code{name}}{\code{character}. Name of table in the database.}

\item{\code{geomName}}{\code{character}. Name of the column containing the geometry value in the db table.}

\item{\code{value}}{value representing the table in the database.}

\item{\code{geometry}}{\code{character}. Type of geometry in the dbSpatial object.}
}}

\examples{
# create in-memory DuckDB db
duckdb_conn = DBI::dbConnect(duckdb::duckdb(), ":memory:")

# test value
test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)

write.csv(test_data, "test_data.csv", row.names = FALSE)

# read data.frame and create point geometry
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = test_data,
          x_colName = "x",
          y_colName = "y",
          overwrite = TRUE)

# read csv
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = 'test_data.csv',
          overwrite = TRUE)
}
\keyword{constructor}
