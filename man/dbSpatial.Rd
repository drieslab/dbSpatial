% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbSpatial.R
\name{dbSpatial}
\alias{dbSpatial}
\title{Create a \code{\link{dbSpatial}} object with geometry data type}
\usage{
dbSpatial(
  value,
  name,
  conn,
  x_colName = NULL,
  y_colName = NULL,
  geomName = "geom",
  overwrite = FALSE,
  ...
)
}
\arguments{
\item{value}{\code{\link{data.frame}}, \code{tbl_duckdb_connection},
\code{character} (valid file path), \code{\link{sf}} object, or \code{\link{terra}} object.
Data to construct \code{\link{dbSpatial}} object with geometry data type.
See details for more information.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{x_colName}{\code{character}. Name of column containing numerical X coordinates. default = \code{NULL}.}

\item{y_colName}{\code{character}. Name of column containing numerical Y coordinates. default = \code{NULL}.}

\item{geomName}{\code{character string}. The geometry column name in the  \code{\link{dbSpatial}}  object. Default: \code{"geom"}.}

\item{overwrite}{\code{logical}. Overwrite existing table. default = \code{FALSE}.}

\item{...}{Additional arguments to be passed}
}
\value{
\code{\link{dbSpatial}} object.
}
\description{
Constructor function to ingest diverse spatial data sources and create
a \code{\link{dbSpatial}} object containing a \code{geometry} data type based
on the \href{https://en.wikipedia.org/wiki/Simple_Features}{Simple Features}
standard.

If \code{x_colName} and \code{y_colName} are both provided, a \code{POINT} geometry
will be constructed based on these columns.
}
\details{
For list of files supported see link below.
\url{https://DuckDB.org/docs/extensions/spatial.html#st_read---read-spatial-value-from-files}
}
\examples{
# create in-memory DuckDB db
duckdb_conn = DBI::dbConnect(duckdb::duckdb(), ":memory:")

# test value
test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)

write.csv(test_data, "test_data.csv", row.names = FALSE)

# read data.frame and create point geometry
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = test_data,
          x_colName = "x",
          y_colName = "y",
          overwrite = TRUE)

# read csv
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = 'test_data.csv',
          x_colName = "x",
          y_colName = "y",
          overwrite = TRUE)
}
\seealso{
Other dbSpatial: 
\code{\link{as_dbSpatial}()},
\code{\link{show}()}
}
\concept{dbSpatial}
