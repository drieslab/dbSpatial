% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbSpatial.R
\name{dbSpatial}
\alias{dbSpatial}
\title{Create a \code{dbSpatial} object with geometry value.}
\usage{
dbSpatial(conn, name, value, x_colName, y_colName, overwrite = FALSE, ...)
}
\arguments{
\item{conn}{Connection to \link{DuckDB} database. \link{duckdb_connection}.}

\item{name}{Name of table to set in the database. Character.}

\item{value}{value to be added to database. Can be a data.frame, tbl,
file path, or \link{terra} object. See details for more information.}

\item{x_colName}{Name of column containing X coordinates. Numeric.}

\item{y_colName}{Name of column containing Y coordinates. Numeric.}

\item{overwrite}{Overwrite existing table (default = FALSE).}

\item{...}{Additional arguments to be passed}
}
\value{
A \code{dbSpatial} object with geometry value.
}
\description{
This function reads in a variety of input value types containing spatial value
and creates a \link{dbSpatial} object which contains a \code{geometry} value type.
If \code{x_colName} and \code{y_colName} are specified, a point geometry will be constructed.
}
\details{
For list of files supported see \link{ST_Read}.

TODO: Support for an existing 'geom' column in DT or DF. e.g. SDF, sf, terra.
}
\examples{
# create in-memory DuckDB db
duckdb_conn = DBI::dbConnect(duckdb::duckdb(), ":memory:")

# test value
test_data = data.frame(x = 1:10, y = 1:10, id = 1:10)

write.csv(test_data, "test_data.csv", row.names = FALSE)

# read data.frame and create point geometry
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = test_data,
          x_colName = "x",
          y_colName = "y",
          overwrite = TRUE)

# read csv
dbSpatial(conn = duckdb_conn,
          name = "test_points",
          value = 'test_data.csv',
          overwrite = TRUE)
}
\keyword{constructor}
